
lanternFirmwareCMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a7c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b74  08005b74  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  08005b74  08005b74  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b74  08005b74  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00006b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005b7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000014  08005b90  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08005b90  00007474  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011057  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  00018093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  0001b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  0001c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000125b3  00000000  00000000  0001cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001807c  00000000  00000000  0002f1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068b2b  00000000  00000000  0004724d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afd78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003314  00000000  00000000  000afdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000b30d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b24 	.word	0x08005b24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08005b24 	.word	0x08005b24

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef  hadc;
DMA_HandleTypeDef  hdma_adc;
/* USER CODE END 0 */

void MX_ADC_Init(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b08b      	sub	sp, #44	@ 0x2c
 8000224:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	231c      	movs	r3, #28
 8000228:	18fb      	adds	r3, r7, r3
 800022a:	0018      	movs	r0, r3
 800022c:	230c      	movs	r3, #12
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f005 fc4b 	bl	8005acc <memset>

  /* ADC clocking and instance */
  __HAL_RCC_ADC1_CLK_ENABLE();
 8000236:	4b47      	ldr	r3, [pc, #284]	@ (8000354 <MX_ADC_Init+0x134>)
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	4b46      	ldr	r3, [pc, #280]	@ (8000354 <MX_ADC_Init+0x134>)
 800023c:	2180      	movs	r1, #128	@ 0x80
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	430a      	orrs	r2, r1
 8000242:	619a      	str	r2, [r3, #24]
 8000244:	4b43      	ldr	r3, [pc, #268]	@ (8000354 <MX_ADC_Init+0x134>)
 8000246:	699a      	ldr	r2, [r3, #24]
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	4013      	ands	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

  hadc.Instance = ADC1;
 8000252:	4b41      	ldr	r3, [pc, #260]	@ (8000358 <MX_ADC_Init+0x138>)
 8000254:	4a41      	ldr	r2, [pc, #260]	@ (800035c <MX_ADC_Init+0x13c>)
 8000256:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;
 8000258:	4b3f      	ldr	r3, [pc, #252]	@ (8000358 <MX_ADC_Init+0x138>)
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800025e:	4b3e      	ldr	r3, [pc, #248]	@ (8000358 <MX_ADC_Init+0x138>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <MX_ADC_Init+0x138>)
 8000266:	2200      	movs	r2, #0
 8000268:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800026a:	4b3b      	ldr	r3, [pc, #236]	@ (8000358 <MX_ADC_Init+0x138>)
 800026c:	2201      	movs	r2, #1
 800026e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8000270:	4b39      	ldr	r3, [pc, #228]	@ (8000358 <MX_ADC_Init+0x138>)
 8000272:	2204      	movs	r2, #4
 8000274:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8000276:	4b38      	ldr	r3, [pc, #224]	@ (8000358 <MX_ADC_Init+0x138>)
 8000278:	2200      	movs	r2, #0
 800027a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800027c:	4b36      	ldr	r3, [pc, #216]	@ (8000358 <MX_ADC_Init+0x138>)
 800027e:	2200      	movs	r2, #0
 8000280:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode    = ENABLE;
 8000282:	4b35      	ldr	r3, [pc, #212]	@ (8000358 <MX_ADC_Init+0x138>)
 8000284:	2201      	movs	r2, #1
 8000286:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000288:	4b33      	ldr	r3, [pc, #204]	@ (8000358 <MX_ADC_Init+0x138>)
 800028a:	2200      	movs	r2, #0
 800028c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 800028e:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <MX_ADC_Init+0x138>)
 8000290:	22c2      	movs	r2, #194	@ 0xc2
 8000292:	32ff      	adds	r2, #255	@ 0xff
 8000294:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000296:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <MX_ADC_Init+0x138>)
 8000298:	2200      	movs	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800029c:	4b2e      	ldr	r3, [pc, #184]	@ (8000358 <MX_ADC_Init+0x138>)
 800029e:	2224      	movs	r2, #36	@ 0x24
 80002a0:	2101      	movs	r1, #1
 80002a2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 80002a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000358 <MX_ADC_Init+0x138>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK) { Error_Handler(); }
 80002aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000358 <MX_ADC_Init+0x138>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fc31 	bl	8001b14 <HAL_ADC_Init>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC_Init+0x9a>
 80002b6:	f000 fb04 	bl	80008c2 <Error_Handler>

  /* GPIO PB0/PB1 as analog */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ba:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <MX_ADC_Init+0x134>)
 80002bc:	695a      	ldr	r2, [r3, #20]
 80002be:	4b25      	ldr	r3, [pc, #148]	@ (8000354 <MX_ADC_Init+0x134>)
 80002c0:	2180      	movs	r1, #128	@ 0x80
 80002c2:	02c9      	lsls	r1, r1, #11
 80002c4:	430a      	orrs	r2, r1
 80002c6:	615a      	str	r2, [r3, #20]
 80002c8:	4b22      	ldr	r3, [pc, #136]	@ (8000354 <MX_ADC_Init+0x134>)
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	2380      	movs	r3, #128	@ 0x80
 80002ce:	02db      	lsls	r3, r3, #11
 80002d0:	4013      	ands	r3, r2
 80002d2:	603b      	str	r3, [r7, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	2408      	movs	r4, #8
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2314      	movs	r3, #20
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f005 fbf3 	bl	8005acc <memset>
  GPIO_InitStruct.Pin  = GPIO_PIN_0 | GPIO_PIN_1;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2203      	movs	r2, #3
 80002ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2203      	movs	r2, #3
 80002f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	4a19      	ldr	r2, [pc, #100]	@ (8000360 <MX_ADC_Init+0x140>)
 80002fc:	0019      	movs	r1, r3
 80002fe:	0010      	movs	r0, r2
 8000300:	f002 fc32 	bl	8002b68 <HAL_GPIO_Init>

  /* Channel IN8 (PB0) */
  sConfig.Channel      = ADC_CHANNEL_8;
 8000304:	211c      	movs	r1, #28
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2208      	movs	r2, #8
 800030a:	601a      	str	r2, [r3, #0]
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2280      	movs	r2, #128	@ 0x80
 8000310:	0152      	lsls	r2, r2, #5
 8000312:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2207      	movs	r2, #7
 8000318:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) { Error_Handler(); }
 800031a:	187a      	adds	r2, r7, r1
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_ADC_Init+0x138>)
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fe7d 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <MX_ADC_Init+0x10e>
 800032a:	f000 faca 	bl	80008c2 <Error_Handler>

  /* Channel IN9 (PB1) */
  sConfig.Channel = ADC_CHANNEL_9;
 800032e:	211c      	movs	r1, #28
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2209      	movs	r2, #9
 8000334:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) { Error_Handler(); }
 8000336:	187a      	adds	r2, r7, r1
 8000338:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <MX_ADC_Init+0x138>)
 800033a:	0011      	movs	r1, r2
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fe6f 	bl	8002020 <HAL_ADC_ConfigChannel>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_ADC_Init+0x12a>
 8000346:	f000 fabc 	bl	80008c2 <Error_Handler>
}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b00b      	add	sp, #44	@ 0x2c
 8000350:	bd90      	pop	{r4, r7, pc}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	40021000 	.word	0x40021000
 8000358:	20000030 	.word	0x20000030
 800035c:	40012400 	.word	0x40012400
 8000360:	48000400 	.word	0x48000400

08000364 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if (adcHandle->Instance == ADC1)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a21      	ldr	r2, [pc, #132]	@ (80003f8 <HAL_ADC_MspInit+0x94>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d13c      	bne.n	80003f0 <HAL_ADC_MspInit+0x8c>
  {
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000376:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <HAL_ADC_MspInit+0x98>)
 8000378:	695a      	ldr	r2, [r3, #20]
 800037a:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <HAL_ADC_MspInit+0x98>)
 800037c:	2101      	movs	r1, #1
 800037e:	430a      	orrs	r2, r1
 8000380:	615a      	str	r2, [r3, #20]
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <HAL_ADC_MspInit+0x98>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]

    /* DMA: ADC1 -> memory (circular), halfword alignment for 12-bit ADC */
    hdma_adc.Instance                 = DMA1_Channel1;
 800038e:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 8000390:	4a1c      	ldr	r2, [pc, #112]	@ (8000404 <HAL_ADC_MspInit+0xa0>)
 8000392:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000394:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc           = DMA_PINC_DISABLE;
 800039a:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc              = DMA_MINC_ENABLE;
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003a2:	2280      	movs	r2, #128	@ 0x80
 80003a4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003a6:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003a8:	2280      	movs	r2, #128	@ 0x80
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	00d2      	lsls	r2, r2, #3
 80003b4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode                = DMA_CIRCULAR;
 80003b6:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003b8:	2220      	movs	r2, #32
 80003ba:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority            = DMA_PRIORITY_MEDIUM;
 80003bc:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	0152      	lsls	r2, r2, #5
 80003c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK) { Error_Handler(); }
 80003c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 f9ae 	bl	8002728 <HAL_DMA_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <HAL_ADC_MspInit+0x70>
 80003d0:	f000 fa77 	bl	80008c2 <Error_Handler>
    __HAL_LINKDMA(adcHandle, DMA_Handle, hdma_adc);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <HAL_ADC_MspInit+0x9c>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	200c      	movs	r0, #12
 80003e6:	f002 f96d 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003ea:	200c      	movs	r0, #12
 80003ec:	f002 f97f 	bl	80026ee <HAL_NVIC_EnableIRQ>
  }
}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b004      	add	sp, #16
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40012400 	.word	0x40012400
 80003fc:	40021000 	.word	0x40021000
 8000400:	20000070 	.word	0x20000070
 8000404:	40020008 	.word	0x40020008

08000408 <apply_outputs>:
static uint8_t  phase        = 0;
static uint32_t last_toggle  = 0;

/* Apply current mode/brightness and mirror live status (input reg 0) */
static void apply_outputs(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* Hard off if mode==0 or brightness==0 (avoid faint glow on hardware) */
  if (g_mode == 0U || g_brightness == 0U)
 800040c:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <apply_outputs+0xbc>)
 800040e:	881b      	ldrh	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d003      	beq.n	800041c <apply_outputs+0x14>
 8000414:	4b2c      	ldr	r3, [pc, #176]	@ (80004c8 <apply_outputs+0xc0>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d107      	bne.n	800042c <apply_outputs+0x24>
  {
    PWM_SetBoth(0, 0);
 800041c:	2100      	movs	r1, #0
 800041e:	2000      	movs	r0, #0
 8000420:	f000 feb4 	bl	800118c <PWM_SetBoth>
    Modbus_SetStatus(0U);
 8000424:	2000      	movs	r0, #0
 8000426:	f000 fd75 	bl	8000f14 <Modbus_SetStatus>
    return;
 800042a:	e048      	b.n	80004be <apply_outputs+0xb6>
  }

  switch (g_mode)
 800042c:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <apply_outputs+0xbc>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	2b05      	cmp	r3, #5
 8000432:	d036      	beq.n	80004a2 <apply_outputs+0x9a>
 8000434:	dc06      	bgt.n	8000444 <apply_outputs+0x3c>
 8000436:	2b03      	cmp	r3, #3
 8000438:	dc02      	bgt.n	8000440 <apply_outputs+0x38>
 800043a:	2b00      	cmp	r3, #0
 800043c:	dc07      	bgt.n	800044e <apply_outputs+0x46>
 800043e:	e001      	b.n	8000444 <apply_outputs+0x3c>
 8000440:	2b04      	cmp	r3, #4
 8000442:	d019      	beq.n	8000478 <apply_outputs+0x70>
  {
  default:
  case 0: /* ALL OFF */
    PWM_SetBoth(0, 0);
 8000444:	2100      	movs	r1, #0
 8000446:	2000      	movs	r0, #0
 8000448:	f000 fea0 	bl	800118c <PWM_SetBoth>
    break;
 800044c:	e032      	b.n	80004b4 <apply_outputs+0xac>

  case 1: /* UP/DOWN flashing — for 2 heads treat same as wig-wag (alternate) */
  case 2: /* SIDE/SIDE (alternate) */
  case 3: /* WIG/WAG (alternate) */
    PWM_SetBoth(phase ? g_brightness : 0,
 800044e:	4b1f      	ldr	r3, [pc, #124]	@ (80004cc <apply_outputs+0xc4>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <apply_outputs+0x54>
 8000456:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <apply_outputs+0xc0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	e000      	b.n	800045e <apply_outputs+0x56>
 800045c:	2300      	movs	r3, #0
                phase ? 0 : g_brightness);
 800045e:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <apply_outputs+0xc4>)
 8000460:	7812      	ldrb	r2, [r2, #0]
    PWM_SetBoth(phase ? g_brightness : 0,
 8000462:	2a00      	cmp	r2, #0
 8000464:	d102      	bne.n	800046c <apply_outputs+0x64>
 8000466:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <apply_outputs+0xc0>)
 8000468:	7812      	ldrb	r2, [r2, #0]
 800046a:	e000      	b.n	800046e <apply_outputs+0x66>
 800046c:	2200      	movs	r2, #0
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fe8b 	bl	800118c <PWM_SetBoth>
    break;
 8000476:	e01d      	b.n	80004b4 <apply_outputs+0xac>

  case 4: /* ALL FLASH (together) */
    PWM_SetBoth(phase ? g_brightness : 0,
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <apply_outputs+0xc4>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <apply_outputs+0x7e>
 8000480:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <apply_outputs+0xc0>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	e000      	b.n	8000488 <apply_outputs+0x80>
 8000486:	2300      	movs	r3, #0
                phase ? g_brightness : 0);
 8000488:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <apply_outputs+0xc4>)
 800048a:	7812      	ldrb	r2, [r2, #0]
    PWM_SetBoth(phase ? g_brightness : 0,
 800048c:	2a00      	cmp	r2, #0
 800048e:	d002      	beq.n	8000496 <apply_outputs+0x8e>
 8000490:	4a0d      	ldr	r2, [pc, #52]	@ (80004c8 <apply_outputs+0xc0>)
 8000492:	7812      	ldrb	r2, [r2, #0]
 8000494:	e000      	b.n	8000498 <apply_outputs+0x90>
 8000496:	2200      	movs	r2, #0
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fe76 	bl	800118c <PWM_SetBoth>
    break;
 80004a0:	e008      	b.n	80004b4 <apply_outputs+0xac>

  case 5: /* ALL ON */
    PWM_SetBoth(g_brightness, g_brightness);
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <apply_outputs+0xc0>)
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <apply_outputs+0xc0>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	0019      	movs	r1, r3
 80004ac:	0010      	movs	r0, r2
 80004ae:	f000 fe6d 	bl	800118c <PWM_SetBoth>
    break;
 80004b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Mirror requested/active mode to Input Reg[0] so 0x04 reads show status */
  Modbus_SetStatus(g_mode);
 80004b4:	4b03      	ldr	r3, [pc, #12]	@ (80004c4 <apply_outputs+0xbc>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd2b 	bl	8000f14 <Modbus_SetStatus>
}
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	20000002 	.word	0x20000002
 80004c8:	20000000 	.word	0x20000000
 80004cc:	200000b4 	.word	0x200000b4

080004d0 <App_Init>:

void App_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  PWM_Init();
 80004d4:	f000 fe42 	bl	800115c <PWM_Init>

  /* publish defaults so 0x03/0x04 reads show something sensible */
  Modbus_SetBrightnessReg(g_brightness);  /* holding reg[1] */
 80004d8:	4b04      	ldr	r3, [pc, #16]	@ (80004ec <App_Init+0x1c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fd29 	bl	8000f34 <Modbus_SetBrightnessReg>
  apply_outputs();                        /* sets input reg[0] + PWMs */
 80004e2:	f7ff ff91 	bl	8000408 <apply_outputs>
}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000000 	.word	0x20000000

080004f0 <App_Task>:

void App_Task(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  const uint32_t now = HAL_GetTick();
 80004f6:	f001 fadf 	bl	8001ab8 <HAL_GetTick>
 80004fa:	0003      	movs	r3, r0
 80004fc:	607b      	str	r3, [r7, #4]

  /* 500 ms flashing cadence for flashing modes (1/2/3/4) */
  if ((now - last_toggle) >= 500U)
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <App_Task+0x60>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	1ad2      	subs	r2, r2, r3
 8000506:	23fa      	movs	r3, #250	@ 0xfa
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	429a      	cmp	r2, r3
 800050c:	d31b      	bcc.n	8000546 <App_Task+0x56>
  {
    last_toggle = now;
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <App_Task+0x60>)
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	601a      	str	r2, [r3, #0]

    if (g_mode == 1U || g_mode == 2U || g_mode == 3U || g_mode == 4U)
 8000514:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <App_Task+0x64>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d00b      	beq.n	8000534 <App_Task+0x44>
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <App_Task+0x64>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	2b02      	cmp	r3, #2
 8000522:	d007      	beq.n	8000534 <App_Task+0x44>
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <App_Task+0x64>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d003      	beq.n	8000534 <App_Task+0x44>
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <App_Task+0x64>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d108      	bne.n	8000546 <App_Task+0x56>
    {
      phase ^= 1U;
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <App_Task+0x68>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2201      	movs	r2, #1
 800053a:	4053      	eors	r3, r2
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <App_Task+0x68>)
 8000540:	701a      	strb	r2, [r3, #0]
      apply_outputs();  /* re-apply for flash step */
 8000542:	f7ff ff61 	bl	8000408 <apply_outputs>
    }
  }
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	200000b8 	.word	0x200000b8
 8000554:	20000002 	.word	0x20000002
 8000558:	200000b4 	.word	0x200000b4

0800055c <App_SetMode>:

/* Called by Modbus when holding reg 0 (mode) is written */
void App_SetMode(uint16_t mode)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	801a      	strh	r2, [r3, #0]
  /* Accept spec’s full range 0..5; illegal -> OFF */
  g_mode = (mode <= 5U) ? mode : 0U;
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d802      	bhi.n	8000576 <App_SetMode+0x1a>
 8000570:	1dbb      	adds	r3, r7, #6
 8000572:	881a      	ldrh	r2, [r3, #0]
 8000574:	e000      	b.n	8000578 <App_SetMode+0x1c>
 8000576:	2200      	movs	r2, #0
 8000578:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <App_SetMode+0x3c>)
 800057a:	801a      	strh	r2, [r3, #0]

  /* Reset flash phase/timer so behavior is deterministic after change */
  phase = 0;
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <App_SetMode+0x40>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
  last_toggle = HAL_GetTick();
 8000582:	f001 fa99 	bl	8001ab8 <HAL_GetTick>
 8000586:	0002      	movs	r2, r0
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <App_SetMode+0x44>)
 800058a:	601a      	str	r2, [r3, #0]

  apply_outputs();  /* immediate effect + live status mirror */
 800058c:	f7ff ff3c 	bl	8000408 <apply_outputs>
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000002 	.word	0x20000002
 800059c:	200000b4 	.word	0x200000b4
 80005a0:	200000b8 	.word	0x200000b8

080005a4 <App_SetBrightness>:

/* Called by Modbus when holding reg 1 (brightness) is written (0..255) */
void App_SetBrightness(uint16_t br)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	801a      	strh	r2, [r3, #0]
  if (br > 255U) br = 255U;
 80005b0:	1dbb      	adds	r3, r7, #6
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2bff      	cmp	r3, #255	@ 0xff
 80005b6:	d902      	bls.n	80005be <App_SetBrightness+0x1a>
 80005b8:	1dbb      	adds	r3, r7, #6
 80005ba:	22ff      	movs	r2, #255	@ 0xff
 80005bc:	801a      	strh	r2, [r3, #0]
  g_brightness = (uint8_t)br;
 80005be:	1dbb      	adds	r3, r7, #6
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <App_SetBrightness+0x3c>)
 80005c6:	701a      	strb	r2, [r3, #0]

  /* keep holding reg[1] in sync for 0x03 reads */
  Modbus_SetBrightnessReg(g_brightness);
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <App_SetBrightness+0x3c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fcb1 	bl	8000f34 <Modbus_SetBrightnessReg>

  apply_outputs();  /* reflect new brightness right away */
 80005d2:	f7ff ff19 	bl	8000408 <apply_outputs>
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	20000000 	.word	0x20000000

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <MX_DMA_Init+0x48>)
 80005ec:	695a      	ldr	r2, [r3, #20]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_DMA_Init+0x48>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_DMA_Init+0x48>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2009      	movs	r0, #9
 8000608:	f002 f85c 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800060c:	2009      	movs	r0, #9
 800060e:	f002 f86e 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	200b      	movs	r0, #11
 8000618:	f002 f854 	bl	80026c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800061c:	200b      	movs	r0, #11
 800061e:	f002 f866 	bl	80026ee <HAL_NVIC_EnableIRQ>

}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	@ 0x2c
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	2414      	movs	r4, #20
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f005 fa43 	bl	8005acc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b53      	ldr	r3, [pc, #332]	@ (8000798 <MX_GPIO_Init+0x168>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	0309      	lsls	r1, r1, #12
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b50      	ldr	r3, [pc, #320]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	031b      	lsls	r3, r3, #12
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000662:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b4c      	ldr	r3, [pc, #304]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000668:	2180      	movs	r1, #128	@ 0x80
 800066a:	03c9      	lsls	r1, r1, #15
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b49      	ldr	r3, [pc, #292]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	@ 0x80
 8000676:	03db      	lsls	r3, r3, #15
 8000678:	4013      	ands	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b46      	ldr	r3, [pc, #280]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b45      	ldr	r3, [pc, #276]	@ (8000798 <MX_GPIO_Init+0x168>)
 8000684:	2180      	movs	r1, #128	@ 0x80
 8000686:	0289      	lsls	r1, r1, #10
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b42      	ldr	r3, [pc, #264]	@ (8000798 <MX_GPIO_Init+0x168>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	@ 0x80
 8000692:	029b      	lsls	r3, r3, #10
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b3f      	ldr	r3, [pc, #252]	@ (8000798 <MX_GPIO_Init+0x168>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b3e      	ldr	r3, [pc, #248]	@ (8000798 <MX_GPIO_Init+0x168>)
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	02c9      	lsls	r1, r1, #11
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000798 <MX_GPIO_Init+0x168>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	02db      	lsls	r3, r3, #11
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_Pin|PB13_Pin|PB14_Pin|PB15_Pin
 80006b6:	4939      	ldr	r1, [pc, #228]	@ (800079c <MX_GPIO_Init+0x16c>)
 80006b8:	4b39      	ldr	r3, [pc, #228]	@ (80007a0 <MX_GPIO_Init+0x170>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f002 fbc3 	bl	8002e48 <HAL_GPIO_WritePin>
                          |HB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	22e0      	movs	r2, #224	@ 0xe0
 80006c6:	0212      	lsls	r2, r2, #8
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2203      	movs	r2, #3
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	4a32      	ldr	r2, [pc, #200]	@ (80007a4 <MX_GPIO_Init+0x174>)
 80006da:	0019      	movs	r1, r3
 80006dc:	0010      	movs	r0, r2
 80006de:	f002 fa43 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA11
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	4a30      	ldr	r2, [pc, #192]	@ (80007a8 <MX_GPIO_Init+0x178>)
 80006e6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2203      	movs	r2, #3
 80006ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	2390      	movs	r3, #144	@ 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f002 fa33 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000702:	193b      	adds	r3, r7, r4
 8000704:	4a29      	ldr	r2, [pc, #164]	@ (80007ac <MX_GPIO_Init+0x17c>)
 8000706:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2203      	movs	r2, #3
 800070c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	193b      	adds	r3, r7, r4
 8000716:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <MX_GPIO_Init+0x170>)
 8000718:	0019      	movs	r1, r3
 800071a:	0010      	movs	r0, r2
 800071c:	f002 fa24 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_Pin PB13_Pin PB14_Pin PB15_Pin */
  GPIO_InitStruct.Pin = PB12_Pin|PB13_Pin|PB14_Pin|PB15_Pin;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	22f0      	movs	r2, #240	@ 0xf0
 8000726:	0212      	lsls	r2, r2, #8
 8000728:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	000c      	movs	r4, r1
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2201      	movs	r2, #1
 8000730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2203      	movs	r2, #3
 800073c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	193b      	adds	r3, r7, r4
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <MX_GPIO_Init+0x170>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f002 fa0f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	22c0      	movs	r2, #192	@ 0xc0
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2203      	movs	r2, #3
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800075c:	193b      	adds	r3, r7, r4
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <MX_GPIO_Init+0x180>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f002 fa00 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : HB_Pin */
  GPIO_InitStruct.Pin = HB_Pin;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2210      	movs	r2, #16
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2201      	movs	r2, #1
 8000774:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HB_GPIO_Port, &GPIO_InitStruct);
 8000782:	187b      	adds	r3, r7, r1
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <MX_GPIO_Init+0x170>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f002 f9ed 	bl	8002b68 <HAL_GPIO_Init>

}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b00b      	add	sp, #44	@ 0x2c
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	0000f010 	.word	0x0000f010
 80007a0:	48000400 	.word	0x48000400
 80007a4:	48000800 	.word	0x48000800
 80007a8:	000089fc 	.word	0x000089fc
 80007ac:	00000c2f 	.word	0x00000c2f
 80007b0:	48001400 	.word	0x48001400

080007b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  HAL_Init();
 80007b8:	f001 f924 	bl	8001a04 <HAL_Init>
  SystemClock_Config();
 80007bc:	f000 f81c 	bl	80007f8 <SystemClock_Config>

  MX_GPIO_Init();
 80007c0:	f7ff ff36 	bl	8000630 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f7ff ff0e 	bl	80005e4 <MX_DMA_Init>
  MX_ADC_Init();
 80007c8:	f7ff fd2a 	bl	8000220 <MX_ADC_Init>
  MX_TIM16_Init();
 80007cc:	f000 fe00 	bl	80013d0 <MX_TIM16_Init>
  MX_TIM17_Init();
 80007d0:	f000 fe84 	bl	80014dc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80007d4:	f000 ffd2 	bl	800177c <MX_USART1_UART_Init>
  PWM_Init();
 80007d8:	f000 fcc0 	bl	800115c <PWM_Init>

  PowerOn_Blink_Default(); // 3 quick blinks to show the sign is alive
 80007dc:	f000 fc62 	bl	80010a4 <PowerOn_Blink_Default>

  /* === App inits === */
  Modbus_Init();
 80007e0:	f000 fb7c 	bl	8000edc <Modbus_Init>
  Sensors_Init();
 80007e4:	f000 fd14 	bl	8001210 <Sensors_Init>
  App_Init();
 80007e8:	f7ff fe72 	bl	80004d0 <App_Init>

  while (1)
  {
    Sensors_Task(); /* updates input regs 0x0001..0x0004 (mA) */
 80007ec:	f000 fd24 	bl	8001238 <Sensors_Task>
    App_Task();     /* updates input reg 0x0000 (live status) */
 80007f0:	f7ff fe7e 	bl	80004f0 <App_Task>
    Sensors_Task(); /* updates input regs 0x0001..0x0004 (mA) */
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	e7f9      	b.n	80007ec <main+0x38>

080007f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b095      	sub	sp, #84	@ 0x54
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	2420      	movs	r4, #32
 8000800:	193b      	adds	r3, r7, r4
 8000802:	0018      	movs	r0, r3
 8000804:	2330      	movs	r3, #48	@ 0x30
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f005 f95f 	bl	8005acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080e:	2310      	movs	r3, #16
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	0018      	movs	r0, r3
 8000814:	2310      	movs	r3, #16
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f005 f957 	bl	8005acc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	2310      	movs	r3, #16
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f005 f950 	bl	8005acc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800082c:	0021      	movs	r1, r4
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2209      	movs	r2, #9
 8000832:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2202      	movs	r2, #2
 8000844:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	0252      	lsls	r2, r2, #9
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	22b0      	movs	r2, #176	@ 0xb0
 8000852:	0392      	lsls	r2, r2, #14
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	187b      	adds	r3, r7, r1
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fb10 	bl	8002e84 <HAL_RCC_OscConfig>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000868:	f000 f82b 	bl	80008c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800086c:	2110      	movs	r1, #16
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2202      	movs	r2, #2
 8000878:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2101      	movs	r1, #1
 800088a:	0018      	movs	r0, r3
 800088c:	f002 fe14 	bl	80034b8 <HAL_RCC_ClockConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000894:	f000 f815 	bl	80008c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
 8000898:	003b      	movs	r3, r7
 800089a:	2221      	movs	r2, #33	@ 0x21
 800089c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2210      	movs	r2, #16
 80008a8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008aa:	003b      	movs	r3, r7
 80008ac:	0018      	movs	r0, r3
 80008ae:	f002 ff49 	bl	8003744 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b6:	f000 f804 	bl	80008c2 <Error_Handler>
  }
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b015      	add	sp, #84	@ 0x54
 80008c0:	bd90      	pop	{r4, r7, pc}

080008c2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	e7fd      	b.n	80008ca <Error_Handler+0x8>
	...

080008d0 <crc16>:

static uint8_t mb_addr = MB_ADDR_DEFAULT;

/* CRC16/MODBUS */
static uint16_t crc16(const uint8_t *data, uint16_t len)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	000a      	movs	r2, r1
 80008da:	1cbb      	adds	r3, r7, #2
 80008dc:	801a      	strh	r2, [r3, #0]
  uint16_t crc = 0xFFFF;
 80008de:	230e      	movs	r3, #14
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2201      	movs	r2, #1
 80008e4:	4252      	negs	r2, r2
 80008e6:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < len; i++)
 80008e8:	230c      	movs	r3, #12
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	2200      	movs	r2, #0
 80008ee:	801a      	strh	r2, [r3, #0]
 80008f0:	e03a      	b.n	8000968 <crc16+0x98>
  {
    crc ^= data[i];
 80008f2:	230c      	movs	r3, #12
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	0019      	movs	r1, r3
 8000900:	220e      	movs	r2, #14
 8000902:	18bb      	adds	r3, r7, r2
 8000904:	18ba      	adds	r2, r7, r2
 8000906:	8812      	ldrh	r2, [r2, #0]
 8000908:	404a      	eors	r2, r1
 800090a:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 8; j++)
 800090c:	230b      	movs	r3, #11
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e01d      	b.n	8000952 <crc16+0x82>
    {
      uint16_t lsb = crc & 1u;
 8000916:	2408      	movs	r4, #8
 8000918:	193b      	adds	r3, r7, r4
 800091a:	200e      	movs	r0, #14
 800091c:	183a      	adds	r2, r7, r0
 800091e:	8812      	ldrh	r2, [r2, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	400a      	ands	r2, r1
 8000924:	801a      	strh	r2, [r3, #0]
      crc >>= 1;
 8000926:	0001      	movs	r1, r0
 8000928:	187b      	adds	r3, r7, r1
 800092a:	187a      	adds	r2, r7, r1
 800092c:	8812      	ldrh	r2, [r2, #0]
 800092e:	0852      	lsrs	r2, r2, #1
 8000930:	801a      	strh	r2, [r3, #0]
      if (lsb)
 8000932:	193b      	adds	r3, r7, r4
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <crc16+0x76>
        crc ^= 0xA001;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	187a      	adds	r2, r7, r1
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	4910      	ldr	r1, [pc, #64]	@ (8000984 <crc16+0xb4>)
 8000942:	404a      	eors	r2, r1
 8000944:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 8; j++)
 8000946:	210b      	movs	r1, #11
 8000948:	187b      	adds	r3, r7, r1
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	187b      	adds	r3, r7, r1
 800094e:	3201      	adds	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	230b      	movs	r3, #11
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b07      	cmp	r3, #7
 800095a:	d9dc      	bls.n	8000916 <crc16+0x46>
  for (uint16_t i = 0; i < len; i++)
 800095c:	210c      	movs	r1, #12
 800095e:	187b      	adds	r3, r7, r1
 8000960:	881a      	ldrh	r2, [r3, #0]
 8000962:	187b      	adds	r3, r7, r1
 8000964:	3201      	adds	r2, #1
 8000966:	801a      	strh	r2, [r3, #0]
 8000968:	230c      	movs	r3, #12
 800096a:	18fa      	adds	r2, r7, r3
 800096c:	1cbb      	adds	r3, r7, #2
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3bd      	bcc.n	80008f2 <crc16+0x22>
    }
  }
  return crc;
 8000976:	230e      	movs	r3, #14
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	881b      	ldrh	r3, [r3, #0]
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b005      	add	sp, #20
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	ffffa001 	.word	0xffffa001

08000988 <start_rx>:

/* RX control (DMA + IDLE) */
static void start_rx(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&huart1, rxbuf, MB_RX_BUFSZ);
 800098c:	2380      	movs	r3, #128	@ 0x80
 800098e:	005a      	lsls	r2, r3, #1
 8000990:	4907      	ldr	r1, [pc, #28]	@ (80009b0 <start_rx+0x28>)
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <start_rx+0x2c>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fe7b 	bl	8004690 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <start_rx+0x2c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <start_rx+0x2c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2110      	movs	r1, #16
 80009a6:	430a      	orrs	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000cc 	.word	0x200000cc
 80009b4:	20000360 	.word	0x20000360

080009b8 <Modbus_UART_IdleISR>:

/* Called from USART1_IRQHandler on IDLE */
void Modbus_UART_IdleISR(void)
{
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b093      	sub	sp, #76	@ 0x4c
 80009bc:	af00      	add	r7, sp, #0
  uint16_t n = (uint16_t)(MB_RX_BUFSZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx));
 80009be:	4bcf      	ldr	r3, [pc, #828]	@ (8000cfc <Modbus_UART_IdleISR+0x344>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	2440      	movs	r4, #64	@ 0x40
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2180      	movs	r1, #128	@ 0x80
 80009cc:	0049      	lsls	r1, r1, #1
 80009ce:	1a8a      	subs	r2, r1, r2
 80009d0:	801a      	strh	r2, [r3, #0]
  HAL_UART_DMAStop(&huart1);
 80009d2:	4bcb      	ldr	r3, [pc, #812]	@ (8000d00 <Modbus_UART_IdleISR+0x348>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f003 feb2 	bl	800473e <HAL_UART_DMAStop>

  if (n >= 4U)
 80009da:	0020      	movs	r0, r4
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d800      	bhi.n	80009e6 <Modbus_UART_IdleISR+0x2e>
 80009e4:	e268      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
  {
    uint8_t addr = rxbuf[0];
 80009e6:	263f      	movs	r6, #63	@ 0x3f
 80009e8:	19bb      	adds	r3, r7, r6
 80009ea:	4ac6      	ldr	r2, [pc, #792]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
    uint8_t fcode = rxbuf[1];
 80009f0:	253e      	movs	r5, #62	@ 0x3e
 80009f2:	197b      	adds	r3, r7, r5
 80009f4:	4ac3      	ldr	r2, [pc, #780]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 80009f6:	7852      	ldrb	r2, [r2, #1]
 80009f8:	701a      	strb	r2, [r3, #0]
    uint16_t rxcrc = (uint16_t)rxbuf[n - 2] | ((uint16_t)rxbuf[n - 1] << 8);
 80009fa:	183b      	adds	r3, r7, r0
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	3b02      	subs	r3, #2
 8000a00:	4ac0      	ldr	r2, [pc, #768]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a02:	5cd3      	ldrb	r3, [r2, r3]
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	183b      	adds	r3, r7, r0
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	49bd      	ldr	r1, [pc, #756]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a0e:	5ccb      	ldrb	r3, [r1, r3]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	233c      	movs	r3, #60	@ 0x3c
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	801a      	strh	r2, [r3, #0]
    uint16_t calc = crc16(rxbuf, n - 2);
 8000a1e:	183b      	adds	r3, r7, r0
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	3b02      	subs	r3, #2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	213a      	movs	r1, #58	@ 0x3a
 8000a28:	187c      	adds	r4, r7, r1
 8000a2a:	4bb6      	ldr	r3, [pc, #728]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ff4e 	bl	80008d0 <crc16>
 8000a34:	0003      	movs	r3, r0
 8000a36:	8023      	strh	r3, [r4, #0]

    if (addr == mb_addr && rxcrc == calc)
 8000a38:	4bb3      	ldr	r3, [pc, #716]	@ (8000d08 <Modbus_UART_IdleISR+0x350>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	19ba      	adds	r2, r7, r6
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d000      	beq.n	8000a46 <Modbus_UART_IdleISR+0x8e>
 8000a44:	e238      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
 8000a46:	233c      	movs	r3, #60	@ 0x3c
 8000a48:	18fa      	adds	r2, r7, r3
 8000a4a:	213a      	movs	r1, #58	@ 0x3a
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	8812      	ldrh	r2, [r2, #0]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d000      	beq.n	8000a58 <Modbus_UART_IdleISR+0xa0>
 8000a56:	e22f      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
    {
      /* ---------------- READ HOLDING/INPUT REGISTERS ---------------- */
      if ((fcode == 0x03U || fcode == 0x04U) && n >= 8U)
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d004      	beq.n	8000a6a <Modbus_UART_IdleISR+0xb2>
 8000a60:	197b      	adds	r3, r7, r5
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d000      	beq.n	8000a6a <Modbus_UART_IdleISR+0xb2>
 8000a68:	e106      	b.n	8000c78 <Modbus_UART_IdleISR+0x2c0>
 8000a6a:	2340      	movs	r3, #64	@ 0x40
 8000a6c:	18fb      	adds	r3, r7, r3
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b07      	cmp	r3, #7
 8000a72:	d800      	bhi.n	8000a76 <Modbus_UART_IdleISR+0xbe>
 8000a74:	e100      	b.n	8000c78 <Modbus_UART_IdleISR+0x2c0>
      {
        uint16_t start = ((uint16_t)rxbuf[2] << 8) | rxbuf[3];
 8000a76:	4ba3      	ldr	r3, [pc, #652]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a80:	78db      	ldrb	r3, [r3, #3]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	2338      	movs	r3, #56	@ 0x38
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	801a      	strh	r2, [r3, #0]
        uint16_t qty = ((uint16_t)rxbuf[4] << 8) | rxbuf[5];
 8000a8e:	4b9d      	ldr	r3, [pc, #628]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b9b      	ldr	r3, [pc, #620]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	2336      	movs	r3, #54	@ 0x36
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	801a      	strh	r2, [r3, #0]

        const uint16_t *src = (fcode == 0x03U) ? reg_holding : reg_input;
 8000aa6:	233e      	movs	r3, #62	@ 0x3e
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b03      	cmp	r3, #3
 8000aae:	d101      	bne.n	8000ab4 <Modbus_UART_IdleISR+0xfc>
 8000ab0:	4b96      	ldr	r3, [pc, #600]	@ (8000d0c <Modbus_UART_IdleISR+0x354>)
 8000ab2:	e000      	b.n	8000ab6 <Modbus_UART_IdleISR+0xfe>
 8000ab4:	4b96      	ldr	r3, [pc, #600]	@ (8000d10 <Modbus_UART_IdleISR+0x358>)
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint16_t maxregs = (fcode == 0x03U) ? 2U : 5U;
 8000ab8:	233e      	movs	r3, #62	@ 0x3e
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d101      	bne.n	8000ac6 <Modbus_UART_IdleISR+0x10e>
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	e000      	b.n	8000ac8 <Modbus_UART_IdleISR+0x110>
 8000ac6:	2205      	movs	r2, #5
 8000ac8:	212e      	movs	r1, #46	@ 0x2e
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	801a      	strh	r2, [r3, #0]

        if (qty >= 1U && (start + qty) <= maxregs)
 8000ace:	2436      	movs	r4, #54	@ 0x36
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <Modbus_UART_IdleISR+0x122>
 8000ad8:	e099      	b.n	8000c0e <Modbus_UART_IdleISR+0x256>
 8000ada:	2338      	movs	r3, #56	@ 0x38
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	881a      	ldrh	r2, [r3, #0]
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	18d2      	adds	r2, r2, r3
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	dd00      	ble.n	8000af0 <Modbus_UART_IdleISR+0x138>
 8000aee:	e08e      	b.n	8000c0e <Modbus_UART_IdleISR+0x256>
        {
          uint16_t idx = 0;
 8000af0:	2046      	movs	r0, #70	@ 0x46
 8000af2:	183b      	adds	r3, r7, r0
 8000af4:	2200      	movs	r2, #0
 8000af6:	801a      	strh	r2, [r3, #0]
          txbuf[idx++] = mb_addr;
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	183a      	adds	r2, r7, r0
 8000afe:	1c59      	adds	r1, r3, #1
 8000b00:	8011      	strh	r1, [r2, #0]
 8000b02:	001a      	movs	r2, r3
 8000b04:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <Modbus_UART_IdleISR+0x350>)
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	4b82      	ldr	r3, [pc, #520]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000b0a:	5499      	strb	r1, [r3, r2]
          txbuf[idx++] = fcode;
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	183a      	adds	r2, r7, r0
 8000b12:	1c59      	adds	r1, r3, #1
 8000b14:	8011      	strh	r1, [r2, #0]
 8000b16:	0019      	movs	r1, r3
 8000b18:	4b7e      	ldr	r3, [pc, #504]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000b1a:	223e      	movs	r2, #62	@ 0x3e
 8000b1c:	18ba      	adds	r2, r7, r2
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	545a      	strb	r2, [r3, r1]
          txbuf[idx++] = (uint8_t)(qty * 2U);
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	183b      	adds	r3, r7, r0
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	183a      	adds	r2, r7, r0
 8000b2e:	1c58      	adds	r0, r3, #1
 8000b30:	8010      	strh	r0, [r2, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	1c0b      	adds	r3, r1, #0
 8000b36:	18db      	adds	r3, r3, r3
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	4b76      	ldr	r3, [pc, #472]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000b3c:	5499      	strb	r1, [r3, r2]

          for (uint16_t i = 0; i < qty; i++)
 8000b3e:	2344      	movs	r3, #68	@ 0x44
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	801a      	strh	r2, [r3, #0]
 8000b46:	e02b      	b.n	8000ba0 <Modbus_UART_IdleISR+0x1e8>
          {
            uint16_t v = src[start + i];
 8000b48:	2338      	movs	r3, #56	@ 0x38
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	2544      	movs	r5, #68	@ 0x44
 8000b50:	197b      	adds	r3, r7, r5
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b5a:	18d2      	adds	r2, r2, r3
 8000b5c:	262a      	movs	r6, #42	@ 0x2a
 8000b5e:	19bb      	adds	r3, r7, r6
 8000b60:	8812      	ldrh	r2, [r2, #0]
 8000b62:	801a      	strh	r2, [r3, #0]
            txbuf[idx++] = (uint8_t)(v >> 8);
 8000b64:	19bb      	adds	r3, r7, r6
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b299      	uxth	r1, r3
 8000b6c:	2446      	movs	r4, #70	@ 0x46
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	193a      	adds	r2, r7, r4
 8000b74:	1c58      	adds	r0, r3, #1
 8000b76:	8010      	strh	r0, [r2, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	b2c9      	uxtb	r1, r1
 8000b7c:	4b65      	ldr	r3, [pc, #404]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000b7e:	5499      	strb	r1, [r3, r2]
            txbuf[idx++] = (uint8_t)(v & 0xFF);
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	193a      	adds	r2, r7, r4
 8000b86:	1c59      	adds	r1, r3, #1
 8000b88:	8011      	strh	r1, [r2, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	19bb      	adds	r3, r7, r6
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b2d9      	uxtb	r1, r3
 8000b92:	4b60      	ldr	r3, [pc, #384]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000b94:	5499      	strb	r1, [r3, r2]
          for (uint16_t i = 0; i < qty; i++)
 8000b96:	197b      	adds	r3, r7, r5
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	197b      	adds	r3, r7, r5
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	801a      	strh	r2, [r3, #0]
 8000ba0:	2344      	movs	r3, #68	@ 0x44
 8000ba2:	18fa      	adds	r2, r7, r3
 8000ba4:	2336      	movs	r3, #54	@ 0x36
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	8812      	ldrh	r2, [r2, #0]
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d3cb      	bcc.n	8000b48 <Modbus_UART_IdleISR+0x190>
          }

          uint16_t c = crc16(txbuf, idx);
 8000bb0:	262c      	movs	r6, #44	@ 0x2c
 8000bb2:	19bc      	adds	r4, r7, r6
 8000bb4:	2546      	movs	r5, #70	@ 0x46
 8000bb6:	197b      	adds	r3, r7, r5
 8000bb8:	881a      	ldrh	r2, [r3, #0]
 8000bba:	4b56      	ldr	r3, [pc, #344]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fe86 	bl	80008d0 <crc16>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	8023      	strh	r3, [r4, #0]
          txbuf[idx++] = (uint8_t)(c & 0xFF);
 8000bc8:	0028      	movs	r0, r5
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	183a      	adds	r2, r7, r0
 8000bd0:	1c59      	adds	r1, r3, #1
 8000bd2:	8011      	strh	r1, [r2, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	19bb      	adds	r3, r7, r6
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000bde:	5499      	strb	r1, [r3, r2]
          txbuf[idx++] = (uint8_t)(c >> 8);
 8000be0:	19bb      	adds	r3, r7, r6
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	b299      	uxth	r1, r3
 8000be8:	183b      	adds	r3, r7, r0
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	0004      	movs	r4, r0
 8000bee:	183a      	adds	r2, r7, r0
 8000bf0:	1c58      	adds	r0, r3, #1
 8000bf2:	8010      	strh	r0, [r2, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	b2c9      	uxtb	r1, r1
 8000bf8:	4b46      	ldr	r3, [pc, #280]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000bfa:	5499      	strb	r1, [r3, r2]
          HAL_UART_Transmit_DMA(&huart1, txbuf, idx);
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	881a      	ldrh	r2, [r3, #0]
 8000c00:	4944      	ldr	r1, [pc, #272]	@ (8000d14 <Modbus_UART_IdleISR+0x35c>)
 8000c02:	4b3f      	ldr	r3, [pc, #252]	@ (8000d00 <Modbus_UART_IdleISR+0x348>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 fcb3 	bl	8004570 <HAL_UART_Transmit_DMA>
        {
 8000c0a:	46c0      	nop			@ (mov r8, r8)
      {
 8000c0c:	e154      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
        }
        else
        {
          uint8_t ex[5] = {mb_addr, (uint8_t)(fcode | 0x80U), 0x02U, 0U, 0U};
 8000c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d08 <Modbus_UART_IdleISR+0x350>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	2114      	movs	r1, #20
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	233e      	movs	r3, #62	@ 0x3e
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	4252      	negs	r2, r2
 8000c22:	4313      	orrs	r3, r2
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	000d      	movs	r5, r1
 8000c28:	197b      	adds	r3, r7, r5
 8000c2a:	705a      	strb	r2, [r3, #1]
 8000c2c:	197b      	adds	r3, r7, r5
 8000c2e:	2202      	movs	r2, #2
 8000c30:	709a      	strb	r2, [r3, #2]
 8000c32:	197b      	adds	r3, r7, r5
 8000c34:	2200      	movs	r2, #0
 8000c36:	70da      	strb	r2, [r3, #3]
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	711a      	strb	r2, [r3, #4]
          uint16_t c = crc16(ex, 3);
 8000c3e:	2628      	movs	r6, #40	@ 0x28
 8000c40:	19bc      	adds	r4, r7, r6
 8000c42:	197b      	adds	r3, r7, r5
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff fe42 	bl	80008d0 <crc16>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	8023      	strh	r3, [r4, #0]
          ex[3] = (uint8_t)(c & 0xFF);
 8000c50:	0031      	movs	r1, r6
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	197b      	adds	r3, r7, r5
 8000c5a:	70da      	strb	r2, [r3, #3]
          ex[4] = (uint8_t)(c >> 8);
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	197b      	adds	r3, r7, r5
 8000c68:	711a      	strb	r2, [r3, #4]
          HAL_UART_Transmit_DMA(&huart1, ex, 5);
 8000c6a:	1979      	adds	r1, r7, r5
 8000c6c:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <Modbus_UART_IdleISR+0x348>)
 8000c6e:	2205      	movs	r2, #5
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 fc7d 	bl	8004570 <HAL_UART_Transmit_DMA>
      {
 8000c76:	e11f      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
        }
      }
      /* ---------------- WRITE SINGLE REGISTER ---------------- */
      else if (fcode == 0x06U && n >= 8U)
 8000c78:	233e      	movs	r3, #62	@ 0x3e
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d000      	beq.n	8000c84 <Modbus_UART_IdleISR+0x2cc>
 8000c82:	e0e7      	b.n	8000e54 <Modbus_UART_IdleISR+0x49c>
 8000c84:	2340      	movs	r3, #64	@ 0x40
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	d800      	bhi.n	8000c90 <Modbus_UART_IdleISR+0x2d8>
 8000c8e:	e0e1      	b.n	8000e54 <Modbus_UART_IdleISR+0x49c>
      {
        uint16_t reg = ((uint16_t)rxbuf[2] << 8) | rxbuf[3];
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000c92:	789b      	ldrb	r3, [r3, #2]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000c9a:	78db      	ldrb	r3, [r3, #3]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	2126      	movs	r1, #38	@ 0x26
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	801a      	strh	r2, [r3, #0]
        uint16_t val = ((uint16_t)rxbuf[4] << 8) | rxbuf[5];
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <Modbus_UART_IdleISR+0x34c>)
 8000cb2:	795b      	ldrb	r3, [r3, #5]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b21a      	sxth	r2, r3
 8000cba:	2324      	movs	r3, #36	@ 0x24
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	801a      	strh	r2, [r3, #0]
        uint8_t ex = 0x00U;
 8000cc0:	2343      	movs	r3, #67	@ 0x43
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

        switch (reg)
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <Modbus_UART_IdleISR+0x31e>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d03d      	beq.n	8000d50 <Modbus_UART_IdleISR+0x398>
 8000cd4:	e051      	b.n	8000d7a <Modbus_UART_IdleISR+0x3c2>
        {
        case 0x0000: /* MODE: valid on 2-flasher = {0,2,4,5} */
        {
          uint8_t valid = (val == 0U) || (val == 2U) || (val == 4U) || (val == 5U);
 8000cd6:	2224      	movs	r2, #36	@ 0x24
 8000cd8:	18bb      	adds	r3, r7, r2
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00b      	beq.n	8000cf8 <Modbus_UART_IdleISR+0x340>
 8000ce0:	18bb      	adds	r3, r7, r2
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d007      	beq.n	8000cf8 <Modbus_UART_IdleISR+0x340>
 8000ce8:	18bb      	adds	r3, r7, r2
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d003      	beq.n	8000cf8 <Modbus_UART_IdleISR+0x340>
 8000cf0:	18bb      	adds	r3, r7, r2
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b05      	cmp	r3, #5
 8000cf6:	d10f      	bne.n	8000d18 <Modbus_UART_IdleISR+0x360>
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	e00e      	b.n	8000d1a <Modbus_UART_IdleISR+0x362>
 8000cfc:	200003e8 	.word	0x200003e8
 8000d00:	20000360 	.word	0x20000360
 8000d04:	200000cc 	.word	0x200000cc
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	200000c8 	.word	0x200000c8
 8000d10:	200000bc 	.word	0x200000bc
 8000d14:	200001cc 	.word	0x200001cc
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2123      	movs	r1, #35	@ 0x23
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
          if (valid)
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00e      	beq.n	8000d46 <Modbus_UART_IdleISR+0x38e>
          {
            reg_holding[0] = val;
 8000d28:	4b66      	ldr	r3, [pc, #408]	@ (8000ec4 <Modbus_UART_IdleISR+0x50c>)
 8000d2a:	2424      	movs	r4, #36	@ 0x24
 8000d2c:	193a      	adds	r2, r7, r4
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	801a      	strh	r2, [r3, #0]
            App_SetMode(val);
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fc10 	bl	800055c <App_SetMode>
            reg_input[0] = val; /* mirror live status for 0x04 reads */
 8000d3c:	4b62      	ldr	r3, [pc, #392]	@ (8000ec8 <Modbus_UART_IdleISR+0x510>)
 8000d3e:	193a      	adds	r2, r7, r4
 8000d40:	8812      	ldrh	r2, [r2, #0]
 8000d42:	801a      	strh	r2, [r3, #0]
          else
          {
            ex = 0x03U; /* Illegal Data Value */
          }
        }
        break;
 8000d44:	e01e      	b.n	8000d84 <Modbus_UART_IdleISR+0x3cc>
            ex = 0x03U; /* Illegal Data Value */
 8000d46:	2343      	movs	r3, #67	@ 0x43
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	701a      	strb	r2, [r3, #0]
        break;
 8000d4e:	e019      	b.n	8000d84 <Modbus_UART_IdleISR+0x3cc>

        case 0x0001: /* BRIGHTNESS: 0..255 */
          if (val <= 255U)
 8000d50:	2224      	movs	r2, #36	@ 0x24
 8000d52:	18bb      	adds	r3, r7, r2
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2bff      	cmp	r3, #255	@ 0xff
 8000d58:	d80a      	bhi.n	8000d70 <Modbus_UART_IdleISR+0x3b8>
          {
            reg_holding[1] = val;
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec4 <Modbus_UART_IdleISR+0x50c>)
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	18ba      	adds	r2, r7, r2
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	805a      	strh	r2, [r3, #2]
            App_SetBrightness(val);
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fc1b 	bl	80005a4 <App_SetBrightness>
          }
          else
          {
            ex = 0x03U; /* Illegal Data Value */
          }
          break;
 8000d6e:	e009      	b.n	8000d84 <Modbus_UART_IdleISR+0x3cc>
            ex = 0x03U; /* Illegal Data Value */
 8000d70:	2343      	movs	r3, #67	@ 0x43
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2203      	movs	r2, #3
 8000d76:	701a      	strb	r2, [r3, #0]
          break;
 8000d78:	e004      	b.n	8000d84 <Modbus_UART_IdleISR+0x3cc>

        default:
          ex = 0x02U; /* Illegal Data Address */
 8000d7a:	2343      	movs	r3, #67	@ 0x43
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	2202      	movs	r2, #2
 8000d80:	701a      	strb	r2, [r3, #0]
          break;
 8000d82:	46c0      	nop			@ (mov r8, r8)
        }

        if (ex == 0x00U)
 8000d84:	2343      	movs	r3, #67	@ 0x43
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d132      	bne.n	8000df4 <Modbus_UART_IdleISR+0x43c>
        {
          /* normal echo */
          uint16_t c = crc16(rxbuf, 6);
 8000d8e:	251e      	movs	r5, #30
 8000d90:	197c      	adds	r4, r7, r5
 8000d92:	4b4e      	ldr	r3, [pc, #312]	@ (8000ecc <Modbus_UART_IdleISR+0x514>)
 8000d94:	2106      	movs	r1, #6
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fd9a 	bl	80008d0 <crc16>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	8023      	strh	r3, [r4, #0]
          txbuf[0] = mb_addr;
 8000da0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed0 <Modbus_UART_IdleISR+0x518>)
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000da6:	701a      	strb	r2, [r3, #0]
          txbuf[1] = 0x06U;
 8000da8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000daa:	2206      	movs	r2, #6
 8000dac:	705a      	strb	r2, [r3, #1]
          txbuf[2] = rxbuf[2];
 8000dae:	4b47      	ldr	r3, [pc, #284]	@ (8000ecc <Modbus_UART_IdleISR+0x514>)
 8000db0:	789a      	ldrb	r2, [r3, #2]
 8000db2:	4b48      	ldr	r3, [pc, #288]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000db4:	709a      	strb	r2, [r3, #2]
          txbuf[3] = rxbuf[3];
 8000db6:	4b45      	ldr	r3, [pc, #276]	@ (8000ecc <Modbus_UART_IdleISR+0x514>)
 8000db8:	78da      	ldrb	r2, [r3, #3]
 8000dba:	4b46      	ldr	r3, [pc, #280]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000dbc:	70da      	strb	r2, [r3, #3]
          txbuf[4] = rxbuf[4];
 8000dbe:	4b43      	ldr	r3, [pc, #268]	@ (8000ecc <Modbus_UART_IdleISR+0x514>)
 8000dc0:	791a      	ldrb	r2, [r3, #4]
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000dc4:	711a      	strb	r2, [r3, #4]
          txbuf[5] = rxbuf[5];
 8000dc6:	4b41      	ldr	r3, [pc, #260]	@ (8000ecc <Modbus_UART_IdleISR+0x514>)
 8000dc8:	795a      	ldrb	r2, [r3, #5]
 8000dca:	4b42      	ldr	r3, [pc, #264]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000dcc:	715a      	strb	r2, [r3, #5]
          txbuf[6] = (uint8_t)(c & 0xFF);
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000dd6:	719a      	strb	r2, [r3, #6]
          txbuf[7] = (uint8_t)(c >> 8);
 8000dd8:	197b      	adds	r3, r7, r5
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000de4:	71da      	strb	r2, [r3, #7]
          HAL_UART_Transmit_DMA(&huart1, txbuf, 8);
 8000de6:	493b      	ldr	r1, [pc, #236]	@ (8000ed4 <Modbus_UART_IdleISR+0x51c>)
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <Modbus_UART_IdleISR+0x520>)
 8000dea:	2208      	movs	r2, #8
 8000dec:	0018      	movs	r0, r3
 8000dee:	f003 fbbf 	bl	8004570 <HAL_UART_Transmit_DMA>
      {
 8000df2:	e061      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
        }
        else
        {
          /* exception reply */
          uint8_t e[5] = {mb_addr, (uint8_t)(0x06U | 0x80U), ex, 0U, 0U};
 8000df4:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <Modbus_UART_IdleISR+0x518>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	250c      	movs	r5, #12
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	197b      	adds	r3, r7, r5
 8000e00:	2286      	movs	r2, #134	@ 0x86
 8000e02:	705a      	strb	r2, [r3, #1]
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	2243      	movs	r2, #67	@ 0x43
 8000e08:	18ba      	adds	r2, r7, r2
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	709a      	strb	r2, [r3, #2]
 8000e0e:	197b      	adds	r3, r7, r5
 8000e10:	2200      	movs	r2, #0
 8000e12:	70da      	strb	r2, [r3, #3]
 8000e14:	197b      	adds	r3, r7, r5
 8000e16:	2200      	movs	r2, #0
 8000e18:	711a      	strb	r2, [r3, #4]
          uint16_t c = crc16(e, 3);
 8000e1a:	2620      	movs	r6, #32
 8000e1c:	19bc      	adds	r4, r7, r6
 8000e1e:	197b      	adds	r3, r7, r5
 8000e20:	2103      	movs	r1, #3
 8000e22:	0018      	movs	r0, r3
 8000e24:	f7ff fd54 	bl	80008d0 <crc16>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	8023      	strh	r3, [r4, #0]
          e[3] = (uint8_t)(c & 0xFF);
 8000e2c:	0031      	movs	r1, r6
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	197b      	adds	r3, r7, r5
 8000e36:	70da      	strb	r2, [r3, #3]
          e[4] = (uint8_t)(c >> 8);
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	197b      	adds	r3, r7, r5
 8000e44:	711a      	strb	r2, [r3, #4]
          HAL_UART_Transmit_DMA(&huart1, e, 5);
 8000e46:	1979      	adds	r1, r7, r5
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <Modbus_UART_IdleISR+0x520>)
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f003 fb8f 	bl	8004570 <HAL_UART_Transmit_DMA>
      {
 8000e52:	e031      	b.n	8000eb8 <Modbus_UART_IdleISR+0x500>
      }

      /* ---------------- ILLEGAL FUNCTION ---------------- */
      else
      {
        uint8_t ex[5] = {mb_addr, (uint8_t)(fcode | 0x80U), 0x01U, 0U, 0U};
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <Modbus_UART_IdleISR+0x518>)
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	233e      	movs	r3, #62	@ 0x3e
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	4252      	negs	r2, r2
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	705a      	strb	r2, [r3, #1]
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	709a      	strb	r2, [r3, #2]
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2200      	movs	r2, #0
 8000e78:	70da      	strb	r2, [r3, #3]
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	711a      	strb	r2, [r3, #4]
        uint16_t c = crc16(ex, 3);
 8000e80:	251c      	movs	r5, #28
 8000e82:	197c      	adds	r4, r7, r5
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2103      	movs	r1, #3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fd21 	bl	80008d0 <crc16>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	8023      	strh	r3, [r4, #0]
        ex[3] = (uint8_t)(c & 0xFF);
 8000e92:	0029      	movs	r1, r5
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	70da      	strb	r2, [r3, #3]
        ex[4] = (uint8_t)(c >> 8);
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	711a      	strb	r2, [r3, #4]
        HAL_UART_Transmit_DMA(&huart1, ex, 5);
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <Modbus_UART_IdleISR+0x520>)
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f003 fb5c 	bl	8004570 <HAL_UART_Transmit_DMA>
      }
    }
  }

  start_rx(); /* re-arm */
 8000eb8:	f7ff fd66 	bl	8000988 <start_rx>
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b013      	add	sp, #76	@ 0x4c
 8000ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ec4:	200000c8 	.word	0x200000c8
 8000ec8:	200000bc 	.word	0x200000bc
 8000ecc:	200000cc 	.word	0x200000cc
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	200001cc 	.word	0x200001cc
 8000ed8:	20000360 	.word	0x20000360

08000edc <Modbus_Init>:

/* Public init */
void Modbus_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  mb_addr = MB_ADDR_DEFAULT;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <Modbus_Init+0x2c>)
 8000ee2:	22a2      	movs	r2, #162	@ 0xa2
 8000ee4:	701a      	strb	r2, [r3, #0]

  memset(reg_input, 0, sizeof(reg_input));
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Modbus_Init+0x30>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	2100      	movs	r1, #0
 8000eec:	0018      	movs	r0, r3
 8000eee:	f004 fded 	bl	8005acc <memset>
  memset(reg_holding, 0, sizeof(reg_holding));
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <Modbus_Init+0x34>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f004 fde7 	bl	8005acc <memset>

  start_rx();
 8000efe:	f7ff fd43 	bl	8000988 <start_rx>
}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	200000bc 	.word	0x200000bc
 8000f10:	200000c8 	.word	0x200000c8

08000f14 <Modbus_SetStatus>:

/* Helpers called by app/sensors */
void Modbus_SetStatus(uint16_t st) { reg_input[0] = st; }
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <Modbus_SetStatus+0x1c>)
 8000f22:	1dba      	adds	r2, r7, #6
 8000f24:	8812      	ldrh	r2, [r2, #0]
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000bc 	.word	0x200000bc

08000f34 <Modbus_SetBrightnessReg>:
void Modbus_SetBrightnessReg(uint16_t b) { reg_holding[1] = (b > 255U) ? 255U : b; }
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	801a      	strh	r2, [r3, #0]
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	2aff      	cmp	r2, #255	@ 0xff
 8000f48:	d900      	bls.n	8000f4c <Modbus_SetBrightnessReg+0x18>
 8000f4a:	23ff      	movs	r3, #255	@ 0xff
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <Modbus_SetBrightnessReg+0x28>)
 8000f50:	805a      	strh	r2, [r3, #2]
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	200000c8 	.word	0x200000c8

08000f60 <Modbus_SetCurrentRegs>:
void Modbus_SetCurrentRegs(uint16_t mA0, uint16_t mA1)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	0002      	movs	r2, r0
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	1c0a      	adds	r2, r1, #0
 8000f70:	801a      	strh	r2, [r3, #0]
  reg_input[1] = mA0;
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <Modbus_SetCurrentRegs+0x38>)
 8000f74:	1dba      	adds	r2, r7, #6
 8000f76:	8812      	ldrh	r2, [r2, #0]
 8000f78:	805a      	strh	r2, [r3, #2]
  reg_input[2] = mA1;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	@ (8000f98 <Modbus_SetCurrentRegs+0x38>)
 8000f7c:	1d3a      	adds	r2, r7, #4
 8000f7e:	8812      	ldrh	r2, [r2, #0]
 8000f80:	809a      	strh	r2, [r3, #4]
  reg_input[3] = 0;
 8000f82:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Modbus_SetCurrentRegs+0x38>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	80da      	strh	r2, [r3, #6]
  reg_input[4] = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <Modbus_SetCurrentRegs+0x38>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	811a      	strh	r2, [r3, #8]
}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	200000bc 	.word	0x200000bc

08000f9c <clamp_u8>:
#include <stdint.h>
#include "pwm.h" // PWM_Init, PWM_SetBoth (TIM16/TIM17)
#include "app.h" // App_SetMode, App_SetBrightness

/* Clamp helper */
static inline uint8_t clamp_u8(uint16_t v) { return (v > 255U) ? 255U : (uint8_t)v; }
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	1dbb      	adds	r3, r7, #6
 8000fa6:	801a      	strh	r2, [r3, #0]
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	2bff      	cmp	r3, #255	@ 0xff
 8000fae:	d803      	bhi.n	8000fb8 <clamp_u8+0x1c>
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	e000      	b.n	8000fba <clamp_u8+0x1e>
 8000fb8:	23ff      	movs	r3, #255	@ 0xff
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <PowerOn_Blink>:
void PowerOn_Blink(uint8_t times,
                   uint16_t on_ms,
                   uint16_t off_ms,
                   uint16_t final_mode,
                   uint16_t final_brightness)
{
 8000fc2:	b5b0      	push	{r4, r5, r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	0005      	movs	r5, r0
 8000fca:	000c      	movs	r4, r1
 8000fcc:	0010      	movs	r0, r2
 8000fce:	0019      	movs	r1, r3
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	1c2a      	adds	r2, r5, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	1c22      	adds	r2, r4, #0
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	1cbb      	adds	r3, r7, #2
 8000fde:	1c02      	adds	r2, r0, #0
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	1c0a      	adds	r2, r1, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
    /* 1) Bring up PWM on TIM16/TIM17 */
    PWM_Init();
 8000fe8:	f000 f8b8 	bl	800115c <PWM_Init>

    /* 2) Start from a known OFF state */
    PWM_SetBoth(0, 0); // logical OFF on both sides
 8000fec:	2100      	movs	r1, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f8cc 	bl	800118c <PWM_SetBoth>
    HAL_Delay(60);
 8000ff4:	203c      	movs	r0, #60	@ 0x3c
 8000ff6:	f000 fd69 	bl	8001acc <HAL_Delay>

    /* 3) Make the blink obvious (full brightness), but bypass app state machine */
    for (uint8_t i = 0; i < times; i++)
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	e017      	b.n	8001034 <PowerOn_Blink+0x72>
    {
        PWM_SetBoth(255, 255); // both ON (max)
 8001004:	21ff      	movs	r1, #255	@ 0xff
 8001006:	20ff      	movs	r0, #255	@ 0xff
 8001008:	f000 f8c0 	bl	800118c <PWM_SetBoth>
        HAL_Delay(on_ms);
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	0018      	movs	r0, r3
 8001012:	f000 fd5b 	bl	8001acc <HAL_Delay>

        PWM_SetBoth(0, 0); // both OFF
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f8b7 	bl	800118c <PWM_SetBoth>
        HAL_Delay(off_ms);
 800101e:	1cbb      	adds	r3, r7, #2
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fd52 	bl	8001acc <HAL_Delay>
    for (uint8_t i = 0; i < times; i++)
 8001028:	210f      	movs	r1, #15
 800102a:	187b      	adds	r3, r7, r1
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	187b      	adds	r3, r7, r1
 8001030:	3201      	adds	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	230f      	movs	r3, #15
 8001036:	18fa      	adds	r2, r7, r3
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3e0      	bcc.n	8001004 <PowerOn_Blink+0x42>
    }

    /* 4) Restore requested post-boot state via app API */
    uint8_t fb = clamp_u8(final_brightness);
 8001042:	250e      	movs	r5, #14
 8001044:	197c      	adds	r4, r7, r5
 8001046:	2320      	movs	r3, #32
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ffa5 	bl	8000f9c <clamp_u8>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
    App_SetBrightness(fb);
 8001056:	197b      	adds	r3, r7, r5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff faa1 	bl	80005a4 <App_SetBrightness>

    /* Only valid modes should be commanded; if something else is passed, fall back to OFF */
    switch (final_mode)
 8001062:	003b      	movs	r3, r7
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2205      	movs	r2, #5
 8001068:	429a      	cmp	r2, r3
 800106a:	4192      	sbcs	r2, r2
 800106c:	4252      	negs	r2, r2
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	2a00      	cmp	r2, #0
 8001072:	d10f      	bne.n	8001094 <PowerOn_Blink+0xd2>
 8001074:	2235      	movs	r2, #53	@ 0x35
 8001076:	40da      	lsrs	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	2201      	movs	r2, #1
 800107c:	4013      	ands	r3, r2
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	4193      	sbcs	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <PowerOn_Blink+0xd2>
    {
    case 0:
    case 2:
    case 4:
    case 5:
        App_SetMode(final_mode);
 8001088:	003b      	movs	r3, r7
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff fa65 	bl	800055c <App_SetMode>
        break;
 8001092:	e003      	b.n	800109c <PowerOn_Blink+0xda>
    default:
        App_SetMode(0); // safe fallback
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fa61 	bl	800055c <App_SetMode>
        break;
 800109a:	46c0      	nop			@ (mov r8, r8)
    }
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bdb0      	pop	{r4, r5, r7, pc}

080010a4 <PowerOn_Blink_Default>:

/* Default: 3 blinks, 180 ms on/off, end in ALL OFF @ 128 */
void PowerOn_Blink_Default(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af02      	add	r7, sp, #8
    PowerOn_Blink(/*times*/ 3, /*on_ms*/ 180, /*off_ms*/ 180,
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	22b4      	movs	r2, #180	@ 0xb4
 80010b2:	21b4      	movs	r1, #180	@ 0xb4
 80010b4:	2003      	movs	r0, #3
 80010b6:	f7ff ff84 	bl	8000fc2 <PowerOn_Blink>
                  /*final_mode*/ 0, /*final_brightness*/ 128);
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <map_brightness_to_ccr>:
/* Map logical brightness (0..255) to CCR with INVERTED polarity:
   0   -> OFF  (CCR ~ ARR, output high all period, active-low driver = off)
   255 -> FULL (CCR = 0,   output low all period, active-low driver = on)
*/
static inline uint32_t map_brightness_to_ccr(TIM_HandleTypeDef *htim, uint8_t v)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	000a      	movs	r2, r1
 80010ca:	1cfb      	adds	r3, r7, #3
 80010cc:	701a      	strb	r2, [r3, #0]
  uint32_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d4:	613b      	str	r3, [r7, #16]
  /* scale (255 - v) into [0..arr+1), then clamp to arr */
  uint32_t num = (uint32_t)(255u - v) * (arr + 1u);
 80010d6:	1cfb      	adds	r3, r7, #3
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	22ff      	movs	r2, #255	@ 0xff
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	3201      	adds	r2, #1
 80010e2:	4353      	muls	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  uint32_t ccr = num / 255u;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	21ff      	movs	r1, #255	@ 0xff
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff f80c 	bl	8000108 <__udivsi3>
 80010f0:	0003      	movs	r3, r0
 80010f2:	617b      	str	r3, [r7, #20]
  if (ccr > arr) ccr = arr;
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d901      	bls.n	8001100 <map_brightness_to_ccr+0x40>
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	617b      	str	r3, [r7, #20]
  return ccr;
 8001100:	697b      	ldr	r3, [r7, #20]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b006      	add	sp, #24
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <set_ccr_both>:

static inline void set_ccr_both(uint8_t left, uint8_t right)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	701a      	strb	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, map_brightness_to_ccr(&htim16, left));
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <set_ccr_both+0x48>)
 8001120:	681c      	ldr	r4, [r3, #0]
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <set_ccr_both+0x48>)
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff ffc8 	bl	80010c0 <map_brightness_to_ccr>
 8001130:	0003      	movs	r3, r0
 8001132:	6363      	str	r3, [r4, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, map_brightness_to_ccr(&htim17, right));
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <set_ccr_both+0x4c>)
 8001136:	681c      	ldr	r4, [r3, #0]
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <set_ccr_both+0x4c>)
 800113e:	0011      	movs	r1, r2
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffbd 	bl	80010c0 <map_brightness_to_ccr>
 8001146:	0003      	movs	r3, r0
 8001148:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b003      	add	sp, #12
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	200002d0 	.word	0x200002d0
 8001158:	20000318 	.word	0x20000318

0800115c <PWM_Init>:

void PWM_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Ensure outputs are OFF before enabling PWM to avoid a power-up flash */
  set_ccr_both(0, 0);  /* logical OFF */
 8001160:	2100      	movs	r1, #0
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ffd2 	bl	800110c <set_ccr_both>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <PWM_Init+0x28>)
 800116a:	2100      	movs	r1, #0
 800116c:	0018      	movs	r0, r3
 800116e:	f002 fc5f 	bl	8003a30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <PWM_Init+0x2c>)
 8001174:	2100      	movs	r1, #0
 8001176:	0018      	movs	r0, r3
 8001178:	f002 fc5a 	bl	8003a30 <HAL_TIM_PWM_Start>
}
 800117c:	46c0      	nop			@ (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	200002d0 	.word	0x200002d0
 8001188:	20000318 	.word	0x20000318

0800118c <PWM_SetBoth>:

void PWM_SetBoth(uint8_t left, uint8_t right)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	1c0a      	adds	r2, r1, #0
 800119c:	701a      	strb	r2, [r3, #0]
  set_ccr_both(left, right);
 800119e:	1dbb      	adds	r3, r7, #6
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	0011      	movs	r1, r2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ffaf 	bl	800110c <set_ccr_both>
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <adc_to_mA>:
#define SHUNT_mOHM 100u /* example 0.1Ω -> 100 mΩ */
#define GAIN_NUM 10u    /* amplifier gain numerator */
#define GAIN_DEN 1u     /* amplifier gain denominator */

static inline uint16_t adc_to_mA(uint16_t adc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	1dbb      	adds	r3, r7, #6
 80011c2:	801a      	strh	r2, [r3, #0]
  /* V = adc/4095 * 3.3V; I = V / (R * gain); return mA */
  uint32_t VmV = (uint32_t)adc * VREF_mV / ADC_MAX;
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <adc_to_mA+0x4c>)
 80011ca:	4353      	muls	r3, r2
 80011cc:	490e      	ldr	r1, [pc, #56]	@ (8001208 <adc_to_mA+0x50>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7fe ff9a 	bl	8000108 <__udivsi3>
 80011d4:	0003      	movs	r3, r0
 80011d6:	60bb      	str	r3, [r7, #8]
  uint32_t mA = (VmV * GAIN_DEN) / (SHUNT_mOHM * GAIN_NUM);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	22fa      	movs	r2, #250	@ 0xfa
 80011dc:	0091      	lsls	r1, r2, #2
 80011de:	0018      	movs	r0, r3
 80011e0:	f7fe ff92 	bl	8000108 <__udivsi3>
 80011e4:	0003      	movs	r3, r0
 80011e6:	60fb      	str	r3, [r7, #12]
  if (mA > 0xFFFFu)
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	025b      	lsls	r3, r3, #9
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d301      	bcc.n	80011f6 <adc_to_mA+0x3e>
    mA = 0xFFFFu;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <adc_to_mA+0x54>)
 80011f4:	60fb      	str	r3, [r7, #12]
  return (uint16_t)mA;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	b29b      	uxth	r3, r3
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	00000ce4 	.word	0x00000ce4
 8001208:	00000fff 	.word	0x00000fff
 800120c:	0000ffff 	.word	0x0000ffff

08001210 <Sensors_Init>:

void Sensors_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Optional: ADC calibration (F0 has simple calibration) */
#ifdef ADC_CR_ADCAL
  HAL_ADCEx_Calibration_Start(&hadc);
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <Sensors_Init+0x20>)
 8001216:	0018      	movs	r0, r3
 8001218:	f001 f900 	bl	800241c <HAL_ADCEx_Calibration_Start>
#endif
  /* Start ADC in DMA mode: 2 channels circular */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_dma, 2);
 800121c:	4905      	ldr	r1, [pc, #20]	@ (8001234 <Sensors_Init+0x24>)
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <Sensors_Init+0x20>)
 8001220:	2202      	movs	r2, #2
 8001222:	0018      	movs	r0, r3
 8001224:	f000 fdb6 	bl	8001d94 <HAL_ADC_Start_DMA>
}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	20000030 	.word	0x20000030
 8001234:	200002cc 	.word	0x200002cc

08001238 <Sensors_Task>:

void Sensors_Task(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* Convert to mA and publish to Modbus input regs */
  uint16_t i0 = adc_to_mA(adc_dma[0]);
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <Sensors_Task+0x40>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	1dbc      	adds	r4, r7, #6
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ffb7 	bl	80011b8 <adc_to_mA>
 800124a:	0003      	movs	r3, r0
 800124c:	8023      	strh	r3, [r4, #0]
  uint16_t i1 = adc_to_mA(adc_dma[1]);
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <Sensors_Task+0x40>)
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	1d3c      	adds	r4, r7, #4
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ffaf 	bl	80011b8 <adc_to_mA>
 800125a:	0003      	movs	r3, r0
 800125c:	8023      	strh	r3, [r4, #0]
  Modbus_SetCurrentRegs(i0, i1);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	881a      	ldrh	r2, [r3, #0]
 8001262:	1dbb      	adds	r3, r7, #6
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fe79 	bl	8000f60 <Modbus_SetCurrentRegs>
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b003      	add	sp, #12
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200002cc 	.word	0x200002cc

0800127c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <HAL_MspInit+0x44>)
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_MspInit+0x44>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	619a      	str	r2, [r3, #24]
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_MspInit+0x44>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <HAL_MspInit+0x44>)
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_MspInit+0x44>)
 80012a0:	2180      	movs	r1, #128	@ 0x80
 80012a2:	0549      	lsls	r1, r1, #21
 80012a4:	430a      	orrs	r2, r1
 80012a6:	61da      	str	r2, [r3, #28]
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <HAL_MspInit+0x44>)
 80012aa:	69da      	ldr	r2, [r3, #28]
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	40021000 	.word	0x40021000

080012c4 <NMI_Handler>:
extern UART_HandleTypeDef huart1;

/******************************************************************************/
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
void NMI_Handler(void)              { while (1) { } }
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	e7fd      	b.n	80012c8 <NMI_Handler+0x4>

080012cc <HardFault_Handler>:
void HardFault_Handler(void)        { while (1) { } }
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	e7fd      	b.n	80012d0 <HardFault_Handler+0x4>

080012d4 <SVC_Handler>:
void SVC_Handler(void)              { }
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <PendSV_Handler>:
void PendSV_Handler(void)           { }
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <SysTick_Handler>:
void SysTick_Handler(void)          { HAL_IncTick(); }
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	f000 fbd2 	bl	8001a94 <HAL_IncTick>
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/
/* STM32F0xx Peripheral Interrupt Handlers                                    */
/******************************************************************************/

void DMA1_Channel1_IRQHandler(void)             /* ADC DMA */
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc);
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <DMA1_Channel1_IRQHandler+0x14>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fb3d 	bl	800297e <HAL_DMA_IRQHandler>
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	20000070 	.word	0x20000070

08001310 <DMA1_Channel2_3_IRQHandler>:

/* Not using I2C1 DMA: leave empty to avoid undefined references */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* No-op */
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA1_Channel4_5_IRQHandler>:

void DMA1_Channel4_5_IRQHandler(void)          /* USART1 TX/RX DMA */
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8001322:	0018      	movs	r0, r3
 8001324:	f001 fb2b 	bl	800297e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <DMA1_Channel4_5_IRQHandler+0x20>)
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fb27 	bl	800297e <HAL_DMA_IRQHandler>
}
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	2000042c 	.word	0x2000042c
 800133c:	200003e8 	.word	0x200003e8

08001340 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&hadc);
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <ADC1_IRQHandler+0x14>)
 8001346:	0018      	movs	r0, r3
 8001348:	f000 fda6 	bl	8001e98 <HAL_ADC_IRQHandler>
}
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	20000030 	.word	0x20000030

08001358 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim16);
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <TIM16_IRQHandler+0x14>)
 800135e:	0018      	movs	r0, r3
 8001360:	f002 fc18 	bl	8003b94 <HAL_TIM_IRQHandler>
}
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			@ (mov r8, r8)
 800136c:	200002d0 	.word	0x200002d0

08001370 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim17);
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <TIM17_IRQHandler+0x14>)
 8001376:	0018      	movs	r0, r3
 8001378:	f002 fc0c 	bl	8003b94 <HAL_TIM_IRQHandler>
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000318 	.word	0x20000318

08001388 <I2C1_IRQHandler>:

void I2C1_IRQHandler(void) /* Keep if project uses I2C1 without DMA */
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Stub; fill if you actually use I2C1 */
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <USART1_IRQHandler>:

/* USART1 global interrupt: RX IDLE delimit frames for Modbus */
void USART1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <USART1_IRQHandler+0x2c>)
 800139a:	0018      	movs	r0, r3
 800139c:	f003 fa60 	bl	8004860 <HAL_UART_IRQHandler>

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <USART1_IRQHandler+0x2c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2210      	movs	r2, #16
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d105      	bne.n	80013ba <USART1_IRQHandler+0x26>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80013ae:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <USART1_IRQHandler+0x2c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2210      	movs	r2, #16
 80013b4:	621a      	str	r2, [r3, #32]
    Modbus_UART_IdleISR();           /* hand complete frame to Modbus */
 80013b6:	f7ff faff 	bl	80009b8 <Modbus_UART_IdleISR>
  }
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000360 	.word	0x20000360

080013c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_TIM16_Init>:
  /* USER CODE END TIM14_Init 2 */

}
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	@ 0x40
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	2324      	movs	r3, #36	@ 0x24
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	0018      	movs	r0, r3
 80013dc:	231c      	movs	r3, #28
 80013de:	001a      	movs	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f004 fb73 	bl	8005acc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	0018      	movs	r0, r3
 80013ea:	2320      	movs	r3, #32
 80013ec:	001a      	movs	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	f004 fb6c 	bl	8005acc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013f4:	4b36      	ldr	r3, [pc, #216]	@ (80014d0 <MX_TIM16_Init+0x100>)
 80013f6:	4a37      	ldr	r2, [pc, #220]	@ (80014d4 <MX_TIM16_Init+0x104>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47;
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <MX_TIM16_Init+0x100>)
 80013fc:	222f      	movs	r2, #47	@ 0x2f
 80013fe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b33      	ldr	r3, [pc, #204]	@ (80014d0 <MX_TIM16_Init+0x100>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001406:	4b32      	ldr	r3, [pc, #200]	@ (80014d0 <MX_TIM16_Init+0x100>)
 8001408:	4a33      	ldr	r2, [pc, #204]	@ (80014d8 <MX_TIM16_Init+0x108>)
 800140a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <MX_TIM16_Init+0x100>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <MX_TIM16_Init+0x100>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <MX_TIM16_Init+0x100>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800141e:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <MX_TIM16_Init+0x100>)
 8001420:	0018      	movs	r0, r3
 8001422:	f002 fa5d 	bl	80038e0 <HAL_TIM_Base_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800142a:	f7ff fa4a 	bl	80008c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <MX_TIM16_Init+0x100>)
 8001430:	0018      	movs	r0, r3
 8001432:	f002 faa5 	bl	8003980 <HAL_TIM_PWM_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800143a:	f7ff fa42 	bl	80008c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2124      	movs	r1, #36	@ 0x24
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2260      	movs	r2, #96	@ 0x60
 8001444:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146a:	1879      	adds	r1, r7, r1
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_TIM16_Init+0x100>)
 800146e:	2200      	movs	r2, #0
 8001470:	0018      	movs	r0, r3
 8001472:	f002 fc7d 	bl	8003d70 <HAL_TIM_PWM_ConfigChannel>
 8001476:	1e03      	subs	r3, r0, #0
 8001478:	d001      	beq.n	800147e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800147a:	f7ff fa22 	bl	80008c2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2280      	movs	r2, #128	@ 0x80
 80014a0:	0192      	lsls	r2, r2, #6
 80014a2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014aa:	1d3a      	adds	r2, r7, #4
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_TIM16_Init+0x100>)
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f002 ffef 	bl	8004494 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80014ba:	f7ff fa02 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_TIM16_Init+0x100>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f000 f8ed 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b010      	add	sp, #64	@ 0x40
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	200002d0 	.word	0x200002d0
 80014d4:	40014400 	.word	0x40014400
 80014d8:	000003e7 	.word	0x000003e7

080014dc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	@ 0x40
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e2:	2324      	movs	r3, #36	@ 0x24
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	0018      	movs	r0, r3
 80014e8:	231c      	movs	r3, #28
 80014ea:	001a      	movs	r2, r3
 80014ec:	2100      	movs	r1, #0
 80014ee:	f004 faed 	bl	8005acc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	0018      	movs	r0, r3
 80014f6:	2320      	movs	r3, #32
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f004 fae6 	bl	8005acc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <MX_TIM17_Init+0x100>)
 8001502:	4a37      	ldr	r2, [pc, #220]	@ (80015e0 <MX_TIM17_Init+0x104>)
 8001504:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 47;
 8001506:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <MX_TIM17_Init+0x100>)
 8001508:	222f      	movs	r2, #47	@ 0x2f
 800150a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <MX_TIM17_Init+0x100>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <MX_TIM17_Init+0x100>)
 8001514:	4a33      	ldr	r2, [pc, #204]	@ (80015e4 <MX_TIM17_Init+0x108>)
 8001516:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <MX_TIM17_Init+0x100>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <MX_TIM17_Init+0x100>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <MX_TIM17_Init+0x100>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800152a:	4b2c      	ldr	r3, [pc, #176]	@ (80015dc <MX_TIM17_Init+0x100>)
 800152c:	0018      	movs	r0, r3
 800152e:	f002 f9d7 	bl	80038e0 <HAL_TIM_Base_Init>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d001      	beq.n	800153a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001536:	f7ff f9c4 	bl	80008c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <MX_TIM17_Init+0x100>)
 800153c:	0018      	movs	r0, r3
 800153e:	f002 fa1f 	bl	8003980 <HAL_TIM_PWM_Init>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001546:	f7ff f9bc 	bl	80008c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154a:	2124      	movs	r1, #36	@ 0x24
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2260      	movs	r2, #96	@ 0x60
 8001550:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156a:	187b      	adds	r3, r7, r1
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001570:	187b      	adds	r3, r7, r1
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	1879      	adds	r1, r7, r1
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM17_Init+0x100>)
 800157a:	2200      	movs	r2, #0
 800157c:	0018      	movs	r0, r3
 800157e:	f002 fbf7 	bl	8003d70 <HAL_TIM_PWM_ConfigChannel>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001586:	f7ff f99c 	bl	80008c2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	0192      	lsls	r2, r2, #6
 80015ae:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	01d2      	lsls	r2, r2, #7
 80015b6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80015b8:	1d3a      	adds	r2, r7, #4
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_TIM17_Init+0x100>)
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f002 ff68 	bl	8004494 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM17_Init+0xf0>
  {
    Error_Handler();
 80015c8:	f7ff f97b 	bl	80008c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <MX_TIM17_Init+0x100>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f866 	bl	80016a0 <HAL_TIM_MspPostInit>

}
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b010      	add	sp, #64	@ 0x40
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000318 	.word	0x20000318
 80015e0:	40014800 	.word	0x40014800
 80015e4:	000003e7 	.word	0x000003e7

080015e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a26      	ldr	r2, [pc, #152]	@ (8001690 <HAL_TIM_Base_MspInit+0xa8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d116      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0049      	lsls	r1, r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	61da      	str	r2, [r3, #28]
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 800160a:	69da      	ldr	r2, [r3, #28]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2013      	movs	r0, #19
 800161c:	f001 f852 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001620:	2013      	movs	r0, #19
 8001622:	f001 f864 	bl	80026ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001626:	e02e      	b.n	8001686 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM16)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <HAL_TIM_Base_MspInit+0xb0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d116      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 8001634:	699a      	ldr	r2, [r3, #24]
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	0289      	lsls	r1, r1, #10
 800163c:	430a      	orrs	r2, r1
 800163e:	619a      	str	r2, [r3, #24]
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2015      	movs	r0, #21
 8001654:	f001 f836 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001658:	2015      	movs	r0, #21
 800165a:	f001 f848 	bl	80026ee <HAL_NVIC_EnableIRQ>
}
 800165e:	e012      	b.n	8001686 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM17)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <HAL_TIM_Base_MspInit+0xb4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10d      	bne.n	8001686 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	430a      	orrs	r2, r1
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_TIM_Base_MspInit+0xac>)
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b006      	add	sp, #24
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40002000 	.word	0x40002000
 8001694:	40021000 	.word	0x40021000
 8001698:	40014400 	.word	0x40014400
 800169c:	40014800 	.word	0x40014800

080016a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b08b      	sub	sp, #44	@ 0x2c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	2414      	movs	r4, #20
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	0018      	movs	r0, r3
 80016ae:	2314      	movs	r3, #20
 80016b0:	001a      	movs	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	f004 fa0a 	bl	8005acc <memset>
  if(timHandle->Instance==TIM16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a2b      	ldr	r2, [pc, #172]	@ (800176c <HAL_TIM_MspPostInit+0xcc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d125      	bne.n	800170e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	02c9      	lsls	r1, r1, #11
 80016cc:	430a      	orrs	r2, r1
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	02db      	lsls	r3, r3, #11
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2280      	movs	r2, #128	@ 0x80
 80016e2:	0052      	lsls	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	0021      	movs	r1, r4
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2202      	movs	r2, #2
 80016ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2203      	movs	r2, #3
 80016f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2202      	movs	r2, #2
 80016fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	187b      	adds	r3, r7, r1
 8001702:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <HAL_TIM_MspPostInit+0xd4>)
 8001704:	0019      	movs	r1, r3
 8001706:	0010      	movs	r0, r2
 8001708:	f001 fa2e 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800170c:	e029      	b.n	8001762 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM17)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_TIM_MspPostInit+0xd8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d124      	bne.n	8001762 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 800171e:	2180      	movs	r1, #128	@ 0x80
 8001720:	02c9      	lsls	r1, r1, #11
 8001722:	430a      	orrs	r2, r1
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_TIM_MspPostInit+0xd0>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	02db      	lsls	r3, r3, #11
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001734:	2114      	movs	r1, #20
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2280      	movs	r2, #128	@ 0x80
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2202      	movs	r2, #2
 8001742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2203      	movs	r2, #3
 800174e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2202      	movs	r2, #2
 8001754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	187b      	adds	r3, r7, r1
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_TIM_MspPostInit+0xd4>)
 800175a:	0019      	movs	r1, r3
 800175c:	0010      	movs	r0, r2
 800175e:	f001 fa03 	bl	8002b68 <HAL_GPIO_Init>
}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b00b      	add	sp, #44	@ 0x2c
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	40014400 	.word	0x40014400
 8001770:	40021000 	.word	0x40021000
 8001774:	48000400 	.word	0x48000400
 8001778:	40014800 	.word	0x40014800

0800177c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;
/* USER CODE END 0 */

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <MX_USART1_UART_Init+0x64>)
 8001784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 8001788:	2296      	movs	r2, #150	@ 0x96
 800178a:	01d2      	lsls	r2, r2, #7
 800178c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2; /* 8-N-2 */
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	0192      	lsls	r2, r2, #6
 800179a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017a4:	220c      	movs	r2, #12
 80017a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* RS-485 DE on PA12, active HIGH */
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80017c0:	4806      	ldr	r0, [pc, #24]	@ (80017dc <MX_USART1_UART_Init+0x60>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	f004 f910 	bl	80059ec <HAL_RS485Ex_Init>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017d0:	f7ff f877 	bl	80008c2 <Error_Handler>
  }

  /* IMPORTANT:
     Do NOT start RX DMA or enable IDLE here — Modbus module owns it. */
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	20000360 	.word	0x20000360
 80017e0:	40013800 	.word	0x40013800

080017e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08b      	sub	sp, #44	@ 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	2414      	movs	r4, #20
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	0018      	movs	r0, r3
 80017f2:	2314      	movs	r3, #20
 80017f4:	001a      	movs	r2, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	f004 f968 	bl	8005acc <memset>
  if (uartHandle->Instance == USART1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a64      	ldr	r2, [pc, #400]	@ (8001994 <HAL_UART_MspInit+0x1b0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d000      	beq.n	8001808 <HAL_UART_MspInit+0x24>
 8001806:	e0c0      	b.n	800198a <HAL_UART_MspInit+0x1a6>
  {
    __HAL_RCC_USART1_CLK_ENABLE();
 8001808:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 800180a:	699a      	ldr	r2, [r3, #24]
 800180c:	4b62      	ldr	r3, [pc, #392]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	01c9      	lsls	r1, r1, #7
 8001812:	430a      	orrs	r2, r1
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	4b60      	ldr	r3, [pc, #384]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 8001818:	699a      	ldr	r2, [r3, #24]
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b5c      	ldr	r3, [pc, #368]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 800182a:	2180      	movs	r1, #128	@ 0x80
 800182c:	0289      	lsls	r1, r1, #10
 800182e:	430a      	orrs	r2, r1
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001840:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	4b54      	ldr	r3, [pc, #336]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 8001846:	2101      	movs	r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	4b52      	ldr	r3, [pc, #328]	@ (8001998 <HAL_UART_MspInit+0x1b4>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]

    /* PA9 = TX, PA10 = RX, PA12 = DE (AF1) */
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_12;
 8001858:	193b      	adds	r3, r7, r4
 800185a:	2290      	movs	r2, #144	@ 0x90
 800185c:	0152      	lsls	r2, r2, #5
 800185e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	193b      	adds	r3, r7, r4
 8001862:	2202      	movs	r2, #2
 8001864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	193b      	adds	r3, r7, r4
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	2203      	movs	r2, #3
 8001870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001872:	193b      	adds	r3, r7, r4
 8001874:	2201      	movs	r2, #1
 8001876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	193a      	adds	r2, r7, r4
 800187a:	2390      	movs	r3, #144	@ 0x90
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f001 f971 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001886:	0021      	movs	r1, r4
 8001888:	187b      	adds	r3, r7, r1
 800188a:	2280      	movs	r2, #128	@ 0x80
 800188c:	00d2      	lsls	r2, r2, #3
 800188e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2202      	movs	r2, #2
 8001894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2201      	movs	r2, #1
 800189a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2203      	movs	r2, #3
 80018a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2201      	movs	r2, #1
 80018a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	2390      	movs	r3, #144	@ 0x90
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 f959 	bl	8002b68 <HAL_GPIO_Init>

    /* DMA RX: Channel 5, circular (Modbus will start it) */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80018b6:	4b39      	ldr	r3, [pc, #228]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018b8:	4a39      	ldr	r2, [pc, #228]	@ (80019a0 <HAL_UART_MspInit+0x1bc>)
 80018ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ce:	4b33      	ldr	r3, [pc, #204]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80018da:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018dc:	2220      	movs	r2, #32
 80018de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018e6:	4b2d      	ldr	r3, [pc, #180]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f000 ff1d 	bl	8002728 <HAL_DMA_Init>
 80018ee:	1e03      	subs	r3, r0, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80018f2:	f7fe ffe6 	bl	80008c2 <Error_Handler>
    }
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_RX_DMA_CH5);
 80018f6:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_UART_MspInit+0x1c0>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <HAL_UART_MspInit+0x1c0>)
 80018fc:	2180      	movs	r1, #128	@ 0x80
 80018fe:	00c9      	lsls	r1, r1, #3
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a25      	ldr	r2, [pc, #148]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 8001908:	675a      	str	r2, [r3, #116]	@ 0x74
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_UART_MspInit+0x1b8>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA TX: Channel 4 */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001912:	4a26      	ldr	r2, [pc, #152]	@ (80019ac <HAL_UART_MspInit+0x1c8>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001918:	2210      	movs	r2, #16
 800191a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193a:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 800193c:	2200      	movs	r2, #0
 800193e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001942:	0018      	movs	r0, r3
 8001944:	f000 fef0 	bl	8002728 <HAL_DMA_Init>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 800194c:	f7fe ffb9 	bl	80008c2 <Error_Handler>
    }
    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART1_TX_DMA_CH4);
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_UART_MspInit+0x1c0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_UART_MspInit+0x1c0>)
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	0089      	lsls	r1, r1, #2
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart1_tx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a11      	ldr	r2, [pc, #68]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001962:	671a      	str	r2, [r3, #112]	@ 0x70
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_UART_MspInit+0x1c4>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

    /* NVIC */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	201b      	movs	r0, #27
 8001970:	f000 fea8 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001974:	201b      	movs	r0, #27
 8001976:	f000 feba 	bl	80026ee <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200b      	movs	r0, #11
 8001980:	f000 fea0 	bl	80026c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001984:	200b      	movs	r0, #11
 8001986:	f000 feb2 	bl	80026ee <HAL_NVIC_EnableIRQ>
  }
}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b00b      	add	sp, #44	@ 0x2c
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	200003e8 	.word	0x200003e8
 80019a0:	40020058 	.word	0x40020058
 80019a4:	40010000 	.word	0x40010000
 80019a8:	2000042c 	.word	0x2000042c
 80019ac:	40020044 	.word	0x40020044

080019b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b0:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b4:	f7ff fd06 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b8:	480c      	ldr	r0, [pc, #48]	@ (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019ba:	490d      	ldr	r1, [pc, #52]	@ (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019bc:	4a0d      	ldr	r2, [pc, #52]	@ (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d0:	4c0a      	ldr	r4, [pc, #40]	@ (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019de:	f004 f87d 	bl	8005adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e2:	f7fe fee7 	bl	80007b4 <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   r0, =_estack
 80019e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80019f4:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 80019f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80019fc:	20000474 	.word	0x20000474

08001a00 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <EXTI0_1_IRQHandler>
	...

08001a04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_Init+0x24>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_Init+0x24>)
 8001a0e:	2110      	movs	r1, #16
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 f809 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fc2f 	bl	800127c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_InitTick+0x5c>)
 8001a36:	681c      	ldr	r4, [r3, #0]
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	23fa      	movs	r3, #250	@ 0xfa
 8001a40:	0098      	lsls	r0, r3, #2
 8001a42:	f7fe fb61 	bl	8000108 <__udivsi3>
 8001a46:	0003      	movs	r3, r0
 8001a48:	0019      	movs	r1, r3
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	f7fe fb5c 	bl	8000108 <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fe5b 	bl	800270e <HAL_SYSTICK_Config>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e00f      	b.n	8001a80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d80b      	bhi.n	8001a7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	425b      	negs	r3, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fe28 	bl	80026c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <HAL_InitTick+0x64>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b003      	add	sp, #12
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	18d2      	adds	r2, r2, r3
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	20000470 	.word	0x20000470

08001ab8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	20000470 	.word	0x20000470

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fff0 	bl	8001ab8 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	f7ff ffe0 	bl	8001ab8 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	20000010 	.word	0x20000010

08001b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e125      	b.n	8001d7e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10a      	bne.n	8001b50 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2234      	movs	r2, #52	@ 0x34
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7fe fc0a 	bl	8000364 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b54:	2210      	movs	r2, #16
 8001b56:	4013      	ands	r3, r2
 8001b58:	d000      	beq.n	8001b5c <HAL_ADC_Init+0x48>
 8001b5a:	e103      	b.n	8001d64 <HAL_ADC_Init+0x250>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d000      	beq.n	8001b68 <HAL_ADC_Init+0x54>
 8001b66:	e0fd      	b.n	8001d64 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001b72:	d000      	beq.n	8001b76 <HAL_ADC_Init+0x62>
 8001b74:	e0f6      	b.n	8001d64 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b7a:	4a83      	ldr	r2, [pc, #524]	@ (8001d88 <HAL_ADC_Init+0x274>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2202      	movs	r2, #2
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d112      	bne.n	8001bba <HAL_ADC_Init+0xa6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d009      	beq.n	8001bb6 <HAL_ADC_Init+0xa2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	401a      	ands	r2, r3
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_Init+0xa6>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_ADC_Init+0xa8>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d116      	bne.n	8001bee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2218      	movs	r2, #24
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	0899      	lsrs	r1, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4964      	ldr	r1, [pc, #400]	@ (8001d8c <HAL_ADC_Init+0x278>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e5b      	ldrb	r3, [r3, #25]
 8001c08:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e9b      	ldrb	r3, [r3, #26]
 8001c10:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001c12:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d002      	beq.n	8001c22 <HAL_ADC_Init+0x10e>
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	015b      	lsls	r3, r3, #5
 8001c20:	e000      	b.n	8001c24 <HAL_ADC_Init+0x110>
 8001c22:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c24:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001c2a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Init+0x124>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e000      	b.n	8001c3a <HAL_ADC_Init+0x126>
 8001c38:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2124      	movs	r1, #36	@ 0x24
 8001c40:	5c5b      	ldrb	r3, [r3, r1]
 8001c42:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001c44:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7edb      	ldrb	r3, [r3, #27]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d115      	bne.n	8001c80 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7e9b      	ldrb	r3, [r3, #26]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	0252      	lsls	r2, r2, #9
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	e00b      	b.n	8001c80 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	2201      	movs	r2, #1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	23c2      	movs	r3, #194	@ 0xc2
 8001c86:	33ff      	adds	r3, #255	@ 0xff
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001c94:	4313      	orrs	r3, r2
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	055b      	lsls	r3, r3, #21
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d01b      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d017      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d00f      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d007      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	2b06      	cmp	r3, #6
 8001ce6:	d003      	beq.n	8001cf0 <HAL_ADC_Init+0x1dc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	2b07      	cmp	r3, #7
 8001cee:	d112      	bne.n	8001d16 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2107      	movs	r1, #7
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6959      	ldr	r1, [r3, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <HAL_ADC_Init+0x27c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10b      	bne.n	8001d3e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d3c:	e01c      	b.n	8001d78 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	2212      	movs	r2, #18
 8001d44:	4393      	bics	r3, r2
 8001d46:	2210      	movs	r2, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d52:	2201      	movs	r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d62:	e009      	b.n	8001d78 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	2210      	movs	r2, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001d70:	230f      	movs	r3, #15
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	fffffefd 	.word	0xfffffefd
 8001d8c:	fffe0219 	.word	0xfffe0219
 8001d90:	833fffe7 	.word	0x833fffe7

08001d94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2317      	movs	r3, #23
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d15e      	bne.n	8001e72 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2234      	movs	r2, #52	@ 0x34
 8001db8:	5c9b      	ldrb	r3, [r3, r2]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Start_DMA+0x2e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e05e      	b.n	8001e80 <HAL_ADC_Start_DMA+0xec>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2234      	movs	r2, #52	@ 0x34
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	7e5b      	ldrb	r3, [r3, #25]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d007      	beq.n	8001de2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001dd2:	2317      	movs	r3, #23
 8001dd4:	18fc      	adds	r4, r7, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 fa17 	bl	800220c <ADC_Enable>
 8001dde:	0003      	movs	r3, r0
 8001de0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001de2:	2317      	movs	r3, #23
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d146      	bne.n	8001e7a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_ADC_Start_DMA+0xf4>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	0052      	lsls	r2, r2, #1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2234      	movs	r2, #52	@ 0x34
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a1e      	ldr	r2, [pc, #120]	@ (8001e8c <HAL_ADC_Start_DMA+0xf8>)
 8001e12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4a1d      	ldr	r2, [pc, #116]	@ (8001e90 <HAL_ADC_Start_DMA+0xfc>)
 8001e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	4a1c      	ldr	r2, [pc, #112]	@ (8001e94 <HAL_ADC_Start_DMA+0x100>)
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	221c      	movs	r2, #28
 8001e2a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2110      	movs	r1, #16
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2101      	movs	r1, #1
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3340      	adds	r3, #64	@ 0x40
 8001e56:	0019      	movs	r1, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f000 fcac 	bl	80027b8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b007      	add	sp, #28
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	fffff0fe 	.word	0xfffff0fe
 8001e8c:	08002315 	.word	0x08002315
 8001e90:	080023c9 	.word	0x080023c9
 8001e94:	080023e7 	.word	0x080023e7

08001e98 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_ADC_IRQHandler+0x28>
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ec6:	d049      	beq.n	8001f5c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d045      	beq.n	8001f5c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ede:	2280      	movs	r2, #128	@ 0x80
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	23c0      	movs	r3, #192	@ 0xc0
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d12a      	bne.n	8001f4c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d126      	bne.n	8001f4c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2208      	movs	r2, #8
 8001f02:	4013      	ands	r3, r2
 8001f04:	d022      	beq.n	8001f4c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d110      	bne.n	8001f34 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	210c      	movs	r1, #12
 8001f1e:	438a      	bics	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <HAL_ADC_IRQHandler+0x144>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f32:	e00b      	b.n	8001f4c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f38:	2220      	movs	r2, #32
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	2201      	movs	r2, #1
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f846 	bl	8001fe0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	220c      	movs	r2, #12
 8001f5a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	4013      	ands	r3, r2
 8001f62:	d012      	beq.n	8001f8a <HAL_ADC_IRQHandler+0xf2>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d00e      	beq.n	8001f8a <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f70:	2280      	movs	r2, #128	@ 0x80
 8001f72:	0252      	lsls	r2, r2, #9
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f83f 	bl	8002000 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d020      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x13c>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2210      	movs	r2, #16
 8001f96:	4013      	ands	r3, r2
 8001f98:	d01c      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d006      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10d      	bne.n	8001fcc <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 f822 	bl	8002010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	601a      	str	r2, [r3, #0]
  }

}
 8001fd4:	46c0      	nop			@ (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	fffffefe 	.word	0xfffffefe

08001fe0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ff8:	46c0      	nop			@ (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002008:	46c0      	nop			@ (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	230f      	movs	r3, #15
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	055b      	lsls	r3, r3, #21
 800203e:	429a      	cmp	r2, r3
 8002040:	d011      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x46>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	2b01      	cmp	r3, #1
 8002048:	d00d      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x46>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204e:	2b02      	cmp	r3, #2
 8002050:	d009      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x46>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	2b03      	cmp	r3, #3
 8002058:	d005      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x46>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	2b04      	cmp	r3, #4
 8002060:	d001      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x46>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2234      	movs	r2, #52	@ 0x34
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x54>
 8002070:	2302      	movs	r3, #2
 8002072:	e0bb      	b.n	80021ec <HAL_ADC_ConfigChannel+0x1cc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2234      	movs	r2, #52	@ 0x34
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2204      	movs	r2, #4
 8002084:	4013      	ands	r3, r2
 8002086:	d000      	beq.n	800208a <HAL_ADC_ConfigChannel+0x6a>
 8002088:	e09f      	b.n	80021ca <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a59      	ldr	r2, [pc, #356]	@ (80021f4 <HAL_ADC_ConfigChannel+0x1d4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x76>
 8002094:	e077      	b.n	8002186 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d037      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d033      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d02f      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d02b      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d027      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d023      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d01f      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	2b07      	cmp	r3, #7
 80020ee:	d01b      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2107      	movs	r1, #7
 80020fc:	400b      	ands	r3, r1
 80020fe:	429a      	cmp	r2, r3
 8002100:	d012      	beq.n	8002128 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2107      	movs	r1, #7
 800210e:	438a      	bics	r2, r1
 8002110:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2207      	movs	r2, #7
 800211e:	401a      	ands	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b10      	cmp	r3, #16
 800212e:	d003      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x118>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b11      	cmp	r3, #17
 8002136:	d152      	bne.n	80021de <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_ADC_ConfigChannel+0x1d8>)
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d102      	bne.n	800214a <HAL_ADC_ConfigChannel+0x12a>
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	e001      	b.n	800214e <HAL_ADC_ConfigChannel+0x12e>
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	03db      	lsls	r3, r3, #15
 800214e:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002150:	430b      	orrs	r3, r1
 8002152:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d140      	bne.n	80021de <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800215c:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <HAL_ADC_ConfigChannel+0x1dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4927      	ldr	r1, [pc, #156]	@ (8002200 <HAL_ADC_ConfigChannel+0x1e0>)
 8002162:	0018      	movs	r0, r3
 8002164:	f7fd ffd0 	bl	8000108 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	001a      	movs	r2, r3
 800216c:	0013      	movs	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	189b      	adds	r3, r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002176:	e002      	b.n	800217e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x158>
 8002184:	e02b      	b.n	80021de <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2101      	movs	r1, #1
 8002192:	4099      	lsls	r1, r3
 8002194:	000b      	movs	r3, r1
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	400a      	ands	r2, r1
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d003      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x190>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b11      	cmp	r3, #17
 80021ae:	d116      	bne.n	80021de <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_ADC_ConfigChannel+0x1d8>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1a0>
 80021bc:	4a11      	ldr	r2, [pc, #68]	@ (8002204 <HAL_ADC_ConfigChannel+0x1e4>)
 80021be:	e000      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1a2>
 80021c0:	4a11      	ldr	r2, [pc, #68]	@ (8002208 <HAL_ADC_ConfigChannel+0x1e8>)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <HAL_ADC_ConfigChannel+0x1d8>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e009      	b.n	80021de <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ce:	2220      	movs	r2, #32
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80021d6:	230f      	movs	r3, #15
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2234      	movs	r2, #52	@ 0x34
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80021e6:	230f      	movs	r3, #15
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b004      	add	sp, #16
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00001001 	.word	0x00001001
 80021f8:	40012708 	.word	0x40012708
 80021fc:	20000008 	.word	0x20000008
 8002200:	000f4240 	.word	0x000f4240
 8002204:	ff7fffff 	.word	0xff7fffff
 8002208:	ffbfffff 	.word	0xffbfffff

0800220c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	2b01      	cmp	r3, #1
 8002228:	d112      	bne.n	8002250 <ADC_Enable+0x44>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	2b01      	cmp	r3, #1
 8002236:	d009      	beq.n	800224c <ADC_Enable+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	401a      	ands	r2, r3
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	429a      	cmp	r2, r3
 800224a:	d101      	bne.n	8002250 <ADC_Enable+0x44>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <ADC_Enable+0x46>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d152      	bne.n	80022fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a2a      	ldr	r2, [pc, #168]	@ (8002308 <ADC_Enable+0xfc>)
 800225e:	4013      	ands	r3, r2
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002266:	2210      	movs	r2, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	2201      	movs	r2, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e03f      	b.n	80022fe <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800228e:	4b1f      	ldr	r3, [pc, #124]	@ (800230c <ADC_Enable+0x100>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	491f      	ldr	r1, [pc, #124]	@ (8002310 <ADC_Enable+0x104>)
 8002294:	0018      	movs	r0, r3
 8002296:	f7fd ff37 	bl	8000108 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800229e:	e002      	b.n	80022a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f9      	bne.n	80022a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ac:	f7ff fc04 	bl	8001ab8 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022b4:	e01b      	b.n	80022ee <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022b6:	f7ff fbff 	bl	8001ab8 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d914      	bls.n	80022ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d00d      	beq.n	80022ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022d6:	2210      	movs	r2, #16
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e2:	2201      	movs	r2, #1
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e007      	b.n	80022fe <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d1dc      	bne.n	80022b6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			@ (mov r8, r8)
 8002308:	80000017 	.word	0x80000017
 800230c:	20000008 	.word	0x20000008
 8002310:	000f4240 	.word	0x000f4240

08002314 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	2250      	movs	r2, #80	@ 0x50
 8002328:	4013      	ands	r3, r2
 800232a:	d140      	bne.n	80023ae <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002330:	2280      	movs	r2, #128	@ 0x80
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	23c0      	movs	r3, #192	@ 0xc0
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4013      	ands	r3, r2
 8002346:	d12d      	bne.n	80023a4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800234c:	2b00      	cmp	r3, #0
 800234e:	d129      	bne.n	80023a4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2208      	movs	r2, #8
 8002358:	4013      	ands	r3, r2
 800235a:	2b08      	cmp	r3, #8
 800235c:	d122      	bne.n	80023a4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2204      	movs	r2, #4
 8002366:	4013      	ands	r3, r2
 8002368:	d110      	bne.n	800238c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	210c      	movs	r1, #12
 8002376:	438a      	bics	r2, r1
 8002378:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237e:	4a11      	ldr	r2, [pc, #68]	@ (80023c4 <ADC_DMAConvCplt+0xb0>)
 8002380:	4013      	ands	r3, r2
 8002382:	2201      	movs	r2, #1
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	639a      	str	r2, [r3, #56]	@ 0x38
 800238a:	e00b      	b.n	80023a4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002390:	2220      	movs	r2, #32
 8002392:	431a      	orrs	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2201      	movs	r2, #1
 800239e:	431a      	orrs	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7ff fe1a 	bl	8001fe0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80023ac:	e005      	b.n	80023ba <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	0010      	movs	r0, r2
 80023b8:	4798      	blx	r3
}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	fffffefe 	.word	0xfffffefe

080023c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff fe09 	bl	8001ff0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	2240      	movs	r2, #64	@ 0x40
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	2204      	movs	r2, #4
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fdfe 	bl	8002010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2317      	movs	r3, #23
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2234      	movs	r2, #52	@ 0x34
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_ADCEx_Calibration_Start+0x26>
 800243e:	2302      	movs	r3, #2
 8002440:	e08d      	b.n	800255e <HAL_ADCEx_Calibration_Start+0x142>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2234      	movs	r2, #52	@ 0x34
 8002446:	2101      	movs	r1, #1
 8002448:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2203      	movs	r2, #3
 8002452:	4013      	ands	r3, r2
 8002454:	2b01      	cmp	r3, #1
 8002456:	d112      	bne.n	800247e <HAL_ADCEx_Calibration_Start+0x62>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	4013      	ands	r3, r2
 8002462:	2b01      	cmp	r3, #1
 8002464:	d009      	beq.n	800247a <HAL_ADCEx_Calibration_Start+0x5e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	401a      	ands	r2, r3
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	429a      	cmp	r2, r3
 8002478:	d101      	bne.n	800247e <HAL_ADCEx_Calibration_Start+0x62>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_ADCEx_Calibration_Start+0x64>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d15b      	bne.n	800253c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002488:	4a37      	ldr	r2, [pc, #220]	@ (8002568 <HAL_ADCEx_Calibration_Start+0x14c>)
 800248a:	4013      	ands	r3, r2
 800248c:	2202      	movs	r2, #2
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2203      	movs	r2, #3
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2103      	movs	r1, #3
 80024ac:	438a      	bics	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2180      	movs	r1, #128	@ 0x80
 80024bc:	0609      	lsls	r1, r1, #24
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80024c2:	f7ff faf9 	bl	8001ab8 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80024ca:	e01d      	b.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80024cc:	f7ff faf4 	bl	8001ab8 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d916      	bls.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	0fdb      	lsrs	r3, r3, #31
 80024e2:	07da      	lsls	r2, r3, #31
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10d      	bne.n	8002508 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f0:	2212      	movs	r2, #18
 80024f2:	4393      	bics	r3, r2
 80024f4:	2210      	movs	r2, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2234      	movs	r2, #52	@ 0x34
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e02a      	b.n	800255e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	0fdb      	lsrs	r3, r3, #31
 8002510:	07da      	lsls	r2, r3, #31
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	429a      	cmp	r2, r3
 8002518:	d0d8      	beq.n	80024cc <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68d9      	ldr	r1, [r3, #12]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	430a      	orrs	r2, r1
 8002528:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	2203      	movs	r2, #3
 8002530:	4393      	bics	r3, r2
 8002532:	2201      	movs	r2, #1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	639a      	str	r2, [r3, #56]	@ 0x38
 800253a:	e009      	b.n	8002550 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	2220      	movs	r2, #32
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002548:	2317      	movs	r3, #23
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2234      	movs	r2, #52	@ 0x34
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002558:	2317      	movs	r3, #23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	fffffefd 	.word	0xfffffefd

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b7f      	cmp	r3, #127	@ 0x7f
 800257e:	d809      	bhi.n	8002594 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	231f      	movs	r3, #31
 8002588:	401a      	ands	r2, r3
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <__NVIC_EnableIRQ+0x30>)
 800258c:	2101      	movs	r1, #1
 800258e:	4091      	lsls	r1, r2
 8002590:	000a      	movs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
  }
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	0002      	movs	r2, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025b4:	d828      	bhi.n	8002608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002674 <__NVIC_SetPriority+0xd4>)
 80025b8:	1dfb      	adds	r3, r7, #7
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	33c0      	adds	r3, #192	@ 0xc0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	589b      	ldr	r3, [r3, r2]
 80025c6:	1dfa      	adds	r2, r7, #7
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	0011      	movs	r1, r2
 80025cc:	2203      	movs	r2, #3
 80025ce:	400a      	ands	r2, r1
 80025d0:	00d2      	lsls	r2, r2, #3
 80025d2:	21ff      	movs	r1, #255	@ 0xff
 80025d4:	4091      	lsls	r1, r2
 80025d6:	000a      	movs	r2, r1
 80025d8:	43d2      	mvns	r2, r2
 80025da:	401a      	ands	r2, r3
 80025dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	22ff      	movs	r2, #255	@ 0xff
 80025e4:	401a      	ands	r2, r3
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	2303      	movs	r3, #3
 80025ee:	4003      	ands	r3, r0
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f4:	481f      	ldr	r0, [pc, #124]	@ (8002674 <__NVIC_SetPriority+0xd4>)
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	430a      	orrs	r2, r1
 8002600:	33c0      	adds	r3, #192	@ 0xc0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002606:	e031      	b.n	800266c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <__NVIC_SetPriority+0xd8>)
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0019      	movs	r1, r3
 8002610:	230f      	movs	r3, #15
 8002612:	400b      	ands	r3, r1
 8002614:	3b08      	subs	r3, #8
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3306      	adds	r3, #6
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1dfa      	adds	r2, r7, #7
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	0011      	movs	r1, r2
 8002628:	2203      	movs	r2, #3
 800262a:	400a      	ands	r2, r1
 800262c:	00d2      	lsls	r2, r2, #3
 800262e:	21ff      	movs	r1, #255	@ 0xff
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	43d2      	mvns	r2, r2
 8002636:	401a      	ands	r2, r3
 8002638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	401a      	ands	r2, r3
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	2303      	movs	r3, #3
 800264a:	4003      	ands	r3, r0
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <__NVIC_SetPriority+0xd8>)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	001c      	movs	r4, r3
 8002658:	230f      	movs	r3, #15
 800265a:	4023      	ands	r3, r4
 800265c:	3b08      	subs	r3, #8
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	430a      	orrs	r2, r1
 8002662:	3306      	adds	r3, #6
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	18c3      	adds	r3, r0, r3
 8002668:	3304      	adds	r3, #4
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b003      	add	sp, #12
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1e5a      	subs	r2, r3, #1
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	045b      	lsls	r3, r3, #17
 800268c:	429a      	cmp	r2, r3
 800268e:	d301      	bcc.n	8002694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002690:	2301      	movs	r3, #1
 8002692:	e010      	b.n	80026b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <SysTick_Config+0x44>)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	3a01      	subs	r2, #1
 800269a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269c:	2301      	movs	r3, #1
 800269e:	425b      	negs	r3, r3
 80026a0:	2103      	movs	r1, #3
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff ff7c 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <SysTick_Config+0x44>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ae:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <SysTick_Config+0x44>)
 80026b0:	2207      	movs	r2, #7
 80026b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	e000e010 	.word	0xe000e010

080026c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	210f      	movs	r1, #15
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	1c02      	adds	r2, r0, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	187b      	adds	r3, r7, r1
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	0011      	movs	r1, r2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff5d 	bl	80025a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	0002      	movs	r2, r0
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff ff33 	bl	800256c <__NVIC_EnableIRQ>
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ffaf 	bl	800267c <SysTick_Config>
 800271e:	0003      	movs	r3, r0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e036      	b.n	80027ac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2221      	movs	r2, #33	@ 0x21
 8002742:	2102      	movs	r1, #2
 8002744:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	@ (80027b4 <HAL_DMA_Init+0x8c>)
 8002752:	4013      	ands	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f9ce 	bl	8002b30 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2221      	movs	r2, #33	@ 0x21
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	2100      	movs	r1, #0
 80027a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	0018      	movs	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b004      	add	sp, #16
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	ffffc00f 	.word	0xffffc00f

080027b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2317      	movs	r3, #23
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Start_IT+0x24>
 80027d8:	2302      	movs	r3, #2
 80027da:	e04f      	b.n	800287c <HAL_DMA_Start_IT+0xc4>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	2101      	movs	r1, #1
 80027e2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2221      	movs	r2, #33	@ 0x21
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d13a      	bne.n	8002866 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2221      	movs	r2, #33	@ 0x21
 80027f4:	2102      	movs	r1, #2
 80027f6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2101      	movs	r1, #1
 800280a:	438a      	bics	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f95e 	bl	8002ad6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	210e      	movs	r1, #14
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e00f      	b.n	8002854 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	210a      	movs	r1, #10
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2104      	movs	r1, #4
 8002850:	438a      	bics	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	430a      	orrs	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800286e:	2317      	movs	r3, #23
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b006      	add	sp, #24
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2221      	movs	r2, #33	@ 0x21
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2204      	movs	r2, #4
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e020      	b.n	80028ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	210e      	movs	r1, #14
 80028b6:	438a      	bics	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	438a      	bics	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d2:	2101      	movs	r1, #1
 80028d4:	4091      	lsls	r1, r2
 80028d6:	000a      	movs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2221      	movs	r2, #33	@ 0x21
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	210f      	movs	r1, #15
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2221      	movs	r2, #33	@ 0x21
 8002908:	5c9b      	ldrb	r3, [r3, r2]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d006      	beq.n	800291e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2204      	movs	r2, #4
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e028      	b.n	8002970 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	210e      	movs	r1, #14
 800292a:	438a      	bics	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002946:	2101      	movs	r1, #1
 8002948:	4091      	lsls	r1, r2
 800294a:	000a      	movs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2221      	movs	r2, #33	@ 0x21
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	0010      	movs	r0, r2
 800296e:	4798      	blx	r3
    }
  }
  return status;
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b004      	add	sp, #16
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2204      	movs	r2, #4
 800299c:	409a      	lsls	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4013      	ands	r3, r2
 80029a4:	d024      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x72>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	d020      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	4013      	ands	r3, r2
 80029b8:	d107      	bne.n	80029ca <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2104      	movs	r1, #4
 80029c6:	438a      	bics	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	2104      	movs	r1, #4
 80029d4:	4091      	lsls	r1, r2
 80029d6:	000a      	movs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x66>
 80029e2:	e06a      	b.n	8002aba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	0010      	movs	r0, r2
 80029ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029ee:	e064      	b.n	8002aba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	2202      	movs	r2, #2
 80029f6:	409a      	lsls	r2, r3
 80029f8:	0013      	movs	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	d02b      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xda>
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2202      	movs	r2, #2
 8002a04:	4013      	ands	r3, r2
 8002a06:	d027      	beq.n	8002a58 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	d10b      	bne.n	8002a2c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	210a      	movs	r1, #10
 8002a20:	438a      	bics	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2221      	movs	r2, #33	@ 0x21
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	2102      	movs	r1, #2
 8002a36:	4091      	lsls	r1, r2
 8002a38:	000a      	movs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d036      	beq.n	8002aba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	0010      	movs	r0, r2
 8002a54:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a56:	e030      	b.n	8002aba <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	0013      	movs	r3, r2
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	d028      	beq.n	8002aba <HAL_DMA_IRQHandler+0x13c>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d024      	beq.n	8002aba <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	210e      	movs	r1, #14
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4091      	lsls	r1, r2
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2221      	movs	r2, #33	@ 0x21
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	4798      	blx	r3
    }
  }
}
 8002ab8:	e7ff      	b.n	8002aba <HAL_DMA_IRQHandler+0x13c>
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b004      	add	sp, #16
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	2101      	movs	r1, #1
 8002aee:	4091      	lsls	r1, r2
 8002af0:	000a      	movs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d108      	bne.n	8002b16 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b14:	e007      	b.n	8002b26 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	60da      	str	r2, [r3, #12]
}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <DMA_CalcBaseAndBitshift+0x30>)
 8002b3e:	4694      	mov	ip, r2
 8002b40:	4463      	add	r3, ip
 8002b42:	2114      	movs	r1, #20
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fd fadf 	bl	8000108 <__udivsi3>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <DMA_CalcBaseAndBitshift+0x34>)
 8002b56:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002b58:	46c0      	nop			@ (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	bffdfff8 	.word	0xbffdfff8
 8002b64:	40020000 	.word	0x40020000

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	e14f      	b.n	8002e18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4091      	lsls	r1, r2
 8002b82:	000a      	movs	r2, r1
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d100      	bne.n	8002b90 <HAL_GPIO_Init+0x28>
 8002b8e:	e140      	b.n	8002e12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d005      	beq.n	8002ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d130      	bne.n	8002c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	0013      	movs	r3, r2
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bde:	2201      	movs	r2, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	43da      	mvns	r2, r3
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d017      	beq.n	8002c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	409a      	lsls	r2, r3
 8002c24:	0013      	movs	r3, r2
 8002c26:	43da      	mvns	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d123      	bne.n	8002c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	58d3      	ldr	r3, [r2, r3]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2207      	movs	r2, #7
 8002c64:	4013      	ands	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2107      	movs	r1, #7
 8002c7e:	400b      	ands	r3, r1
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	409a      	lsls	r2, r3
 8002c84:	0013      	movs	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	0092      	lsls	r2, r2, #2
 8002c96:	6939      	ldr	r1, [r7, #16]
 8002c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	0013      	movs	r3, r2
 8002caa:	43da      	mvns	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	23c0      	movs	r3, #192	@ 0xc0
 8002cd4:	029b      	lsls	r3, r3, #10
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d100      	bne.n	8002cdc <HAL_GPIO_Init+0x174>
 8002cda:	e09a      	b.n	8002e12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cdc:	4b54      	ldr	r3, [pc, #336]	@ (8002e30 <HAL_GPIO_Init+0x2c8>)
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_GPIO_Init+0x2c8>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	619a      	str	r2, [r3, #24]
 8002ce8:	4b51      	ldr	r3, [pc, #324]	@ (8002e30 <HAL_GPIO_Init+0x2c8>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e34 <HAL_GPIO_Init+0x2cc>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	589b      	ldr	r3, [r3, r2]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2203      	movs	r2, #3
 8002d06:	4013      	ands	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	0013      	movs	r3, r2
 8002d10:	43da      	mvns	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	2390      	movs	r3, #144	@ 0x90
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0x1e2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a44      	ldr	r2, [pc, #272]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_Init+0x1de>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a43      	ldr	r2, [pc, #268]	@ (8002e3c <HAL_GPIO_Init+0x2d4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_Init+0x1da>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a42      	ldr	r2, [pc, #264]	@ (8002e40 <HAL_GPIO_Init+0x2d8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_Init+0x1d6>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	2103      	movs	r1, #3
 8002d50:	400a      	ands	r2, r1
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	@ (8002e34 <HAL_GPIO_Init+0x2cc>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43da      	mvns	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	035b      	lsls	r3, r3, #13
 8002d82:	4013      	ands	r3, r2
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d94:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	039b      	lsls	r3, r3, #14
 8002dac:	4013      	ands	r3, r2
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002db8:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	2380      	movs	r3, #128	@ 0x80
 8002dd4:	029b      	lsls	r3, r3, #10
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002de8:	4b16      	ldr	r3, [pc, #88]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	025b      	lsls	r3, r3, #9
 8002e00:	4013      	ands	r3, r2
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	40da      	lsrs	r2, r3
 8002e20:	1e13      	subs	r3, r2, #0
 8002e22:	d000      	beq.n	8002e26 <HAL_GPIO_Init+0x2be>
 8002e24:	e6a8      	b.n	8002b78 <HAL_GPIO_Init+0x10>
  } 
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46c0      	nop			@ (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b006      	add	sp, #24
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010000 	.word	0x40010000
 8002e38:	48000400 	.word	0x48000400
 8002e3c:	48000800 	.word	0x48000800
 8002e40:	48000c00 	.word	0x48000c00
 8002e44:	40010400 	.word	0x40010400

08002e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	0008      	movs	r0, r1
 8002e52:	0011      	movs	r1, r2
 8002e54:	1cbb      	adds	r3, r7, #2
 8002e56:	1c02      	adds	r2, r0, #0
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	1c7b      	adds	r3, r7, #1
 8002e5c:	1c0a      	adds	r2, r1, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e60:	1c7b      	adds	r3, r7, #1
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e72:	1cbb      	adds	r3, r7, #2
 8002e74:	881a      	ldrh	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e301      	b.n	800349a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x1e>
 8002ea0:	e08d      	b.n	8002fbe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ea2:	4bc3      	ldr	r3, [pc, #780]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00e      	beq.n	8002ecc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eae:	4bc0      	ldr	r3, [pc, #768]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x64>
 8002eba:	4bbd      	ldr	r3, [pc, #756]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	025b      	lsls	r3, r3, #9
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10d      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4bb8      	ldr	r3, [pc, #736]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	029b      	lsls	r3, r3, #10
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d100      	bne.n	8002eda <HAL_RCC_OscConfig+0x56>
 8002ed8:	e070      	b.n	8002fbc <HAL_RCC_OscConfig+0x138>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d000      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x60>
 8002ee2:	e06b      	b.n	8002fbc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e2d8      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x7c>
 8002ef0:	4baf      	ldr	r3, [pc, #700]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4bae      	ldr	r3, [pc, #696]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	2180      	movs	r1, #128	@ 0x80
 8002ef8:	0249      	lsls	r1, r1, #9
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e02f      	b.n	8002f60 <HAL_RCC_OscConfig+0xdc>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x9e>
 8002f08:	4ba9      	ldr	r3, [pc, #676]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4ba8      	ldr	r3, [pc, #672]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f0e:	49a9      	ldr	r1, [pc, #676]	@ (80031b4 <HAL_RCC_OscConfig+0x330>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	4ba6      	ldr	r3, [pc, #664]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4ba5      	ldr	r3, [pc, #660]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	49a7      	ldr	r1, [pc, #668]	@ (80031b8 <HAL_RCC_OscConfig+0x334>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e01e      	b.n	8002f60 <HAL_RCC_OscConfig+0xdc>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d10e      	bne.n	8002f48 <HAL_RCC_OscConfig+0xc4>
 8002f2a:	4ba1      	ldr	r3, [pc, #644]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4ba0      	ldr	r3, [pc, #640]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	02c9      	lsls	r1, r1, #11
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	4b9d      	ldr	r3, [pc, #628]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	0249      	lsls	r1, r1, #9
 8002f42:	430a      	orrs	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xdc>
 8002f48:	4b99      	ldr	r3, [pc, #612]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b98      	ldr	r3, [pc, #608]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f4e:	4999      	ldr	r1, [pc, #612]	@ (80031b4 <HAL_RCC_OscConfig+0x330>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4b96      	ldr	r3, [pc, #600]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b95      	ldr	r3, [pc, #596]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	4997      	ldr	r1, [pc, #604]	@ (80031b8 <HAL_RCC_OscConfig+0x334>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d014      	beq.n	8002f92 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fda6 	bl	8001ab8 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f72:	f7fe fda1 	bl	8001ab8 <HAL_GetTick>
 8002f76:	0002      	movs	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b64      	cmp	r3, #100	@ 0x64
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e28a      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f84:	4b8a      	ldr	r3, [pc, #552]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0xee>
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe fd91 	bl	8001ab8 <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fd8c 	bl	8001ab8 <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	@ 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e275      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b80      	ldr	r3, [pc, #512]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x118>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d100      	bne.n	8002fca <HAL_RCC_OscConfig+0x146>
 8002fc8:	e069      	b.n	800309e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fca:	4b79      	ldr	r3, [pc, #484]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	220c      	movs	r2, #12
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fd4:	4b76      	ldr	r3, [pc, #472]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	220c      	movs	r2, #12
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d11c      	bne.n	800301a <HAL_RCC_OscConfig+0x196>
 8002fe0:	4b73      	ldr	r3, [pc, #460]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d116      	bne.n	800301a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fec:	4b70      	ldr	r3, [pc, #448]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e24b      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b6b      	ldr	r3, [pc, #428]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	22f8      	movs	r2, #248	@ 0xf8
 8003008:	4393      	bics	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	00da      	lsls	r2, r3, #3
 8003012:	4b67      	ldr	r3, [pc, #412]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003018:	e041      	b.n	800309e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d024      	beq.n	800306c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003022:	4b63      	ldr	r3, [pc, #396]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b62      	ldr	r3, [pc, #392]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003028:	2101      	movs	r1, #1
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe fd43 	bl	8001ab8 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe fd3e 	bl	8001ab8 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e227      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b59      	ldr	r3, [pc, #356]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2202      	movs	r2, #2
 8003050:	4013      	ands	r3, r2
 8003052:	d0f1      	beq.n	8003038 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b56      	ldr	r3, [pc, #344]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	22f8      	movs	r2, #248	@ 0xf8
 800305a:	4393      	bics	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00da      	lsls	r2, r3, #3
 8003064:	4b52      	ldr	r3, [pc, #328]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e018      	b.n	800309e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306c:	4b50      	ldr	r3, [pc, #320]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b4f      	ldr	r3, [pc, #316]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fd1e 	bl	8001ab8 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe fd19 	bl	8001ab8 <HAL_GetTick>
 8003086:	0002      	movs	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e202      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003094:	4b46      	ldr	r3, [pc, #280]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d1f1      	bne.n	8003082 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2208      	movs	r2, #8
 80030a4:	4013      	ands	r3, r2
 80030a6:	d036      	beq.n	8003116 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d019      	beq.n	80030e4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b0:	4b3f      	ldr	r3, [pc, #252]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b4:	4b3e      	ldr	r3, [pc, #248]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7fe fcfc 	bl	8001ab8 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fcf7 	bl	8001ab8 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1e0      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d8:	4b35      	ldr	r3, [pc, #212]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d0f1      	beq.n	80030c6 <HAL_RCC_OscConfig+0x242>
 80030e2:	e018      	b.n	8003116 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	4b32      	ldr	r3, [pc, #200]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e8:	4b31      	ldr	r3, [pc, #196]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	438a      	bics	r2, r1
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f0:	f7fe fce2 	bl	8001ab8 <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe fcdd 	bl	8001ab8 <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1c6      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b28      	ldr	r3, [pc, #160]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	2202      	movs	r2, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d1f1      	bne.n	80030fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2204      	movs	r2, #4
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_RCC_OscConfig+0x29e>
 8003120:	e0b4      	b.n	800328c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	201f      	movs	r0, #31
 8003124:	183b      	adds	r3, r7, r0
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	055b      	lsls	r3, r3, #21
 8003132:	4013      	ands	r3, r2
 8003134:	d110      	bne.n	8003158 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	4b1d      	ldr	r3, [pc, #116]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	0549      	lsls	r1, r1, #21
 8003140:	430a      	orrs	r2, r1
 8003142:	61da      	str	r2, [r3, #28]
 8003144:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	055b      	lsls	r3, r3, #21
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003152:	183b      	adds	r3, r7, r0
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <HAL_RCC_OscConfig+0x338>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	@ 0x80
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d11a      	bne.n	800319a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <HAL_RCC_OscConfig+0x338>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_RCC_OscConfig+0x338>)
 800316a:	2180      	movs	r1, #128	@ 0x80
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe fca1 	bl	8001ab8 <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe fc9c 	bl	8001ab8 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e185      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCC_OscConfig+0x338>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <HAL_RCC_OscConfig+0x33c>
 80031a2:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	4b02      	ldr	r3, [pc, #8]	@ (80031b0 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	2101      	movs	r1, #1
 80031aa:	430a      	orrs	r2, r1
 80031ac:	621a      	str	r2, [r3, #32]
 80031ae:	e035      	b.n	800321c <HAL_RCC_OscConfig+0x398>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	fffeffff 	.word	0xfffeffff
 80031b8:	fffbffff 	.word	0xfffbffff
 80031bc:	40007000 	.word	0x40007000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x35e>
 80031c8:	4bb6      	ldr	r3, [pc, #728]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031ca:	6a1a      	ldr	r2, [r3, #32]
 80031cc:	4bb5      	ldr	r3, [pc, #724]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	621a      	str	r2, [r3, #32]
 80031d4:	4bb3      	ldr	r3, [pc, #716]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4bb2      	ldr	r3, [pc, #712]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031da:	2104      	movs	r1, #4
 80031dc:	438a      	bics	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x398>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x380>
 80031ea:	4bae      	ldr	r3, [pc, #696]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031ec:	6a1a      	ldr	r2, [r3, #32]
 80031ee:	4bad      	ldr	r3, [pc, #692]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031f0:	2104      	movs	r1, #4
 80031f2:	430a      	orrs	r2, r1
 80031f4:	621a      	str	r2, [r3, #32]
 80031f6:	4bab      	ldr	r3, [pc, #684]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	4baa      	ldr	r3, [pc, #680]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x398>
 8003204:	4ba7      	ldr	r3, [pc, #668]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	4ba6      	ldr	r3, [pc, #664]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	621a      	str	r2, [r3, #32]
 8003210:	4ba4      	ldr	r3, [pc, #656]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	4ba3      	ldr	r3, [pc, #652]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003216:	2104      	movs	r1, #4
 8003218:	438a      	bics	r2, r1
 800321a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d014      	beq.n	800324e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003224:	f7fe fc48 	bl	8001ab8 <HAL_GetTick>
 8003228:	0003      	movs	r3, r0
 800322a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322c:	e009      	b.n	8003242 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322e:	f7fe fc43 	bl	8001ab8 <HAL_GetTick>
 8003232:	0002      	movs	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	4a9b      	ldr	r2, [pc, #620]	@ (80034a8 <HAL_RCC_OscConfig+0x624>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e12b      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b98      	ldr	r3, [pc, #608]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x3aa>
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fc33 	bl	8001ab8 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	e009      	b.n	800326c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fc2e 	bl	8001ab8 <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	4a91      	ldr	r2, [pc, #580]	@ (80034a8 <HAL_RCC_OscConfig+0x624>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e116      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4b8d      	ldr	r3, [pc, #564]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	2202      	movs	r2, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003276:	231f      	movs	r3, #31
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003282:	69da      	ldr	r2, [r3, #28]
 8003284:	4b87      	ldr	r3, [pc, #540]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003286:	4989      	ldr	r1, [pc, #548]	@ (80034ac <HAL_RCC_OscConfig+0x628>)
 8003288:	400a      	ands	r2, r1
 800328a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2210      	movs	r2, #16
 8003292:	4013      	ands	r3, r2
 8003294:	d063      	beq.n	800335e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12a      	bne.n	80032f4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800329e:	4b81      	ldr	r3, [pc, #516]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a2:	4b80      	ldr	r3, [pc, #512]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032a4:	2104      	movs	r1, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80032aa:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ae:	4b7d      	ldr	r3, [pc, #500]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032b0:	2101      	movs	r1, #1
 80032b2:	430a      	orrs	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fbff 	bl	8001ab8 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032c0:	f7fe fbfa 	bl	8001ab8 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0e3      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80032d2:	4b74      	ldr	r3, [pc, #464]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d6:	2202      	movs	r2, #2
 80032d8:	4013      	ands	r3, r2
 80032da:	d0f1      	beq.n	80032c0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032dc:	4b71      	ldr	r3, [pc, #452]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	22f8      	movs	r2, #248	@ 0xf8
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	00da      	lsls	r2, r3, #3
 80032ec:	4b6d      	ldr	r3, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032f2:	e034      	b.n	800335e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	3305      	adds	r3, #5
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032fc:	4b69      	ldr	r3, [pc, #420]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80032fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003300:	4b68      	ldr	r3, [pc, #416]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003302:	2104      	movs	r1, #4
 8003304:	438a      	bics	r2, r1
 8003306:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330c:	22f8      	movs	r2, #248	@ 0xf8
 800330e:	4393      	bics	r3, r2
 8003310:	0019      	movs	r1, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	00da      	lsls	r2, r3, #3
 8003318:	4b62      	ldr	r3, [pc, #392]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	@ 0x34
 800331e:	e01e      	b.n	800335e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003320:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003324:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003326:	2104      	movs	r1, #4
 8003328:	430a      	orrs	r2, r1
 800332a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800332c:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800332e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003330:	4b5c      	ldr	r3, [pc, #368]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003332:	2101      	movs	r1, #1
 8003334:	438a      	bics	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fe fbbe 	bl	8001ab8 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003342:	f7fe fbb9 	bl	8001ab8 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0a2      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003354:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003358:	2202      	movs	r2, #2
 800335a:	4013      	ands	r3, r2
 800335c:	d1f1      	bne.n	8003342 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d100      	bne.n	8003368 <HAL_RCC_OscConfig+0x4e4>
 8003366:	e097      	b.n	8003498 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	4b4e      	ldr	r3, [pc, #312]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	220c      	movs	r2, #12
 800336e:	4013      	ands	r3, r2
 8003370:	2b08      	cmp	r3, #8
 8003372:	d100      	bne.n	8003376 <HAL_RCC_OscConfig+0x4f2>
 8003374:	e06b      	b.n	800344e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d14c      	bne.n	8003418 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b49      	ldr	r3, [pc, #292]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003384:	494a      	ldr	r1, [pc, #296]	@ (80034b0 <HAL_RCC_OscConfig+0x62c>)
 8003386:	400a      	ands	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe fb95 	bl	8001ab8 <HAL_GetTick>
 800338e:	0003      	movs	r3, r0
 8003390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fb90 	bl	8001ab8 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e079      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	049b      	lsls	r3, r3, #18
 80033ae:	4013      	ands	r3, r2
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b2:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	220f      	movs	r2, #15
 80033b8:	4393      	bics	r3, r2
 80033ba:	0019      	movs	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c0:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033c2:	430a      	orrs	r2, r1
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a3a      	ldr	r2, [pc, #232]	@ (80034b4 <HAL_RCC_OscConfig+0x630>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	431a      	orrs	r2, r3
 80033da:	4b32      	ldr	r3, [pc, #200]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e0:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 80033e6:	2180      	movs	r1, #128	@ 0x80
 80033e8:	0449      	lsls	r1, r1, #17
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fe fb63 	bl	8001ab8 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fb5e 	bl	8001ab8 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e047      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	049b      	lsls	r3, r3, #18
 8003412:	4013      	ands	r3, r2
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x574>
 8003416:	e03f      	b.n	8003498 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b22      	ldr	r3, [pc, #136]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800341e:	4924      	ldr	r1, [pc, #144]	@ (80034b0 <HAL_RCC_OscConfig+0x62c>)
 8003420:	400a      	ands	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fb48 	bl	8001ab8 <HAL_GetTick>
 8003428:	0003      	movs	r3, r0
 800342a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fb43 	bl	8001ab8 <HAL_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e02c      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	4b18      	ldr	r3, [pc, #96]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2380      	movs	r3, #128	@ 0x80
 8003446:	049b      	lsls	r3, r3, #18
 8003448:	4013      	ands	r3, r2
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x5aa>
 800344c:	e024      	b.n	8003498 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e01f      	b.n	800349a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003460:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_RCC_OscConfig+0x620>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	025b      	lsls	r3, r3, #9
 800346c:	401a      	ands	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	429a      	cmp	r2, r3
 8003474:	d10e      	bne.n	8003494 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	220f      	movs	r2, #15
 800347a:	401a      	ands	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	23f0      	movs	r3, #240	@ 0xf0
 8003488:	039b      	lsls	r3, r3, #14
 800348a:	401a      	ands	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b008      	add	sp, #32
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	40021000 	.word	0x40021000
 80034a8:	00001388 	.word	0x00001388
 80034ac:	efffffff 	.word	0xefffffff
 80034b0:	feffffff 	.word	0xfeffffff
 80034b4:	ffc2ffff 	.word	0xffc2ffff

080034b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b3      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b5b      	ldr	r3, [pc, #364]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d911      	bls.n	80034fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b58      	ldr	r3, [pc, #352]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	4393      	bics	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	4b55      	ldr	r3, [pc, #340]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ec:	4b53      	ldr	r3, [pc, #332]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e09a      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2202      	movs	r2, #2
 8003504:	4013      	ands	r3, r2
 8003506:	d015      	beq.n	8003534 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	4013      	ands	r3, r2
 8003510:	d006      	beq.n	8003520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003512:	4b4b      	ldr	r3, [pc, #300]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003518:	21e0      	movs	r1, #224	@ 0xe0
 800351a:	00c9      	lsls	r1, r1, #3
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	22f0      	movs	r2, #240	@ 0xf0
 8003526:	4393      	bics	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	4b44      	ldr	r3, [pc, #272]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	029b      	lsls	r3, r3, #10
 800354e:	4013      	ands	r3, r2
 8003550:	d114      	bne.n	800357c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06e      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	049b      	lsls	r3, r3, #18
 8003566:	4013      	ands	r3, r2
 8003568:	d108      	bne.n	800357c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e062      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b34      	ldr	r3, [pc, #208]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e05b      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357c:	4b30      	ldr	r3, [pc, #192]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	4393      	bics	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4b2d      	ldr	r3, [pc, #180]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe fa92 	bl	8001ab8 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003598:	e009      	b.n	80035ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359a:	f7fe fa8d 	bl	8001ab8 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	4a27      	ldr	r2, [pc, #156]	@ (8003644 <HAL_RCC_ClockConfig+0x18c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e042      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	220c      	movs	r2, #12
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1ec      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b1e      	ldr	r3, [pc, #120]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2201      	movs	r2, #1
 80035c6:	4013      	ands	r3, r2
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d211      	bcs.n	80035f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2201      	movs	r2, #1
 80035d4:	4393      	bics	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	4b18      	ldr	r3, [pc, #96]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e0:	4b16      	ldr	r3, [pc, #88]	@ (800363c <HAL_RCC_ClockConfig+0x184>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e020      	b.n	8003634 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2204      	movs	r2, #4
 80035f8:	4013      	ands	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a11      	ldr	r2, [pc, #68]	@ (8003648 <HAL_RCC_ClockConfig+0x190>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003610:	f000 f820 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003614:	0001      	movs	r1, r0
 8003616:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <HAL_RCC_ClockConfig+0x188>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	220f      	movs	r2, #15
 800361e:	4013      	ands	r3, r2
 8003620:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_RCC_ClockConfig+0x194>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	000a      	movs	r2, r1
 8003626:	40da      	lsrs	r2, r3
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <HAL_RCC_ClockConfig+0x198>)
 800362a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800362c:	2003      	movs	r0, #3
 800362e:	f7fe f9fd 	bl	8001a2c <HAL_InitTick>
  
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	00001388 	.word	0x00001388
 8003648:	fffff8ff 	.word	0xfffff8ff
 800364c:	08005b3c 	.word	0x08005b3c
 8003650:	20000008 	.word	0x20000008

08003654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	2300      	movs	r3, #0
 8003668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800366e:	4b21      	ldr	r3, [pc, #132]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	220c      	movs	r2, #12
 8003678:	4013      	ands	r3, r2
 800367a:	2b04      	cmp	r3, #4
 800367c:	d002      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0x30>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d004      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x38>
 8003682:	e02e      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003684:	23e1      	movs	r3, #225	@ 0xe1
 8003686:	03db      	lsls	r3, r3, #15
 8003688:	613b      	str	r3, [r7, #16]
      break;
 800368a:	e02d      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0c9b      	lsrs	r3, r3, #18
 8003690:	220f      	movs	r2, #15
 8003692:	4013      	ands	r3, r2
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	220f      	movs	r2, #15
 80036a0:	4013      	ands	r3, r2
 80036a2:	4a16      	ldr	r2, [pc, #88]	@ (80036fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80036a4:	5cd3      	ldrb	r3, [r2, r3]
 80036a6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	23e1      	movs	r3, #225	@ 0xe1
 80036b6:	03d8      	lsls	r0, r3, #15
 80036b8:	f7fc fd26 	bl	8000108 <__udivsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	001a      	movs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4353      	muls	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e009      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x88>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	000a      	movs	r2, r1
 80036cc:	0152      	lsls	r2, r2, #5
 80036ce:	1a52      	subs	r2, r2, r1
 80036d0:	0193      	lsls	r3, r2, #6
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	185b      	adds	r3, r3, r1
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
      break;
 80036e0:	e002      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <HAL_RCC_GetSysClockFreq+0xac>)
 80036e4:	613b      	str	r3, [r7, #16]
      break;
 80036e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036e8:	693b      	ldr	r3, [r7, #16]
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08005b54 	.word	0x08005b54
 80036fc:	08005b64 	.word	0x08005b64
 8003700:	007a1200 	.word	0x007a1200

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b02      	ldr	r3, [pc, #8]	@ (8003714 <HAL_RCC_GetHCLKFreq+0x10>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000008 	.word	0x20000008

08003718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800371c:	f7ff fff2 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003720:	0001      	movs	r1, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	2207      	movs	r2, #7
 800372a:	4013      	ands	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	40d9      	lsrs	r1, r3
 8003732:	000b      	movs	r3, r1
}    
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	40021000 	.word	0x40021000
 8003740:	08005b4c 	.word	0x08005b4c

08003744 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	2380      	movs	r3, #128	@ 0x80
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	4013      	ands	r3, r2
 800375e:	d100      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003760:	e08e      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2017      	movs	r0, #23
 8003764:	183b      	adds	r3, r7, r0
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b57      	ldr	r3, [pc, #348]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	055b      	lsls	r3, r3, #21
 8003772:	4013      	ands	r3, r2
 8003774:	d110      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	4b54      	ldr	r3, [pc, #336]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800377c:	2180      	movs	r1, #128	@ 0x80
 800377e:	0549      	lsls	r1, r1, #21
 8003780:	430a      	orrs	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
 8003784:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	055b      	lsls	r3, r3, #21
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	183b      	adds	r3, r7, r0
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b4c      	ldr	r3, [pc, #304]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d11a      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a4:	4b49      	ldr	r3, [pc, #292]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b48      	ldr	r3, [pc, #288]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	0049      	lsls	r1, r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b2:	f7fe f981 	bl	8001ab8 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	e008      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037bc:	f7fe f97c 	bl	8001ab8 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	@ 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e077      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b3f      	ldr	r3, [pc, #252]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	23c0      	movs	r3, #192	@ 0xc0
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d034      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	23c0      	movs	r3, #192	@ 0xc0
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d02c      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037fc:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a33      	ldr	r2, [pc, #204]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003802:	4013      	ands	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003806:	4b30      	ldr	r3, [pc, #192]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003808:	6a1a      	ldr	r2, [r3, #32]
 800380a:	4b2f      	ldr	r3, [pc, #188]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800380c:	2180      	movs	r1, #128	@ 0x80
 800380e:	0249      	lsls	r1, r1, #9
 8003810:	430a      	orrs	r2, r1
 8003812:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003814:	4b2c      	ldr	r3, [pc, #176]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	4b2b      	ldr	r3, [pc, #172]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800381a:	492e      	ldr	r1, [pc, #184]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800381c:	400a      	ands	r2, r1
 800381e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003820:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	4013      	ands	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fe f943 	bl	8001ab8 <HAL_GetTick>
 8003832:	0003      	movs	r3, r0
 8003834:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fe f93e 	bl	8001ab8 <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	4a25      	ldr	r2, [pc, #148]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e038      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d0f0      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	4b1c      	ldr	r3, [pc, #112]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003866:	430a      	orrs	r2, r1
 8003868:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800386a:	2317      	movs	r3, #23
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800387a:	4918      	ldr	r1, [pc, #96]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800387c:	400a      	ands	r2, r1
 800387e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	2203      	movs	r2, #3
 8003890:	4393      	bics	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800389a:	430a      	orrs	r2, r1
 800389c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d009      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a8:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	2210      	movs	r2, #16
 80038ae:	4393      	bics	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b006      	add	sp, #24
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40007000 	.word	0x40007000
 80038d0:	fffffcff 	.word	0xfffffcff
 80038d4:	fffeffff 	.word	0xfffeffff
 80038d8:	00001388 	.word	0x00001388
 80038dc:	efffffff 	.word	0xefffffff

080038e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e042      	b.n	8003978 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	223d      	movs	r2, #61	@ 0x3d
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	223c      	movs	r2, #60	@ 0x3c
 8003902:	2100      	movs	r1, #0
 8003904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0018      	movs	r0, r3
 800390a:	f7fd fe6d 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	223d      	movs	r2, #61	@ 0x3d
 8003912:	2102      	movs	r1, #2
 8003914:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	0019      	movs	r1, r3
 8003920:	0010      	movs	r0, r2
 8003922:	f000 fb13 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2246      	movs	r2, #70	@ 0x46
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223e      	movs	r2, #62	@ 0x3e
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	223f      	movs	r2, #63	@ 0x3f
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2241      	movs	r2, #65	@ 0x41
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2242      	movs	r2, #66	@ 0x42
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2243      	movs	r2, #67	@ 0x43
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2244      	movs	r2, #68	@ 0x44
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2245      	movs	r2, #69	@ 0x45
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	223d      	movs	r2, #61	@ 0x3d
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e042      	b.n	8003a18 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	223d      	movs	r2, #61	@ 0x3d
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223c      	movs	r2, #60	@ 0x3c
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f839 	bl	8003a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	223d      	movs	r2, #61	@ 0x3d
 80039b2:	2102      	movs	r1, #2
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	0019      	movs	r1, r3
 80039c0:	0010      	movs	r0, r2
 80039c2:	f000 fac3 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2246      	movs	r2, #70	@ 0x46
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223e      	movs	r2, #62	@ 0x3e
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	223f      	movs	r2, #63	@ 0x3f
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2240      	movs	r2, #64	@ 0x40
 80039e2:	2101      	movs	r1, #1
 80039e4:	5499      	strb	r1, [r3, r2]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2241      	movs	r2, #65	@ 0x41
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2242      	movs	r2, #66	@ 0x42
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2243      	movs	r2, #67	@ 0x43
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2244      	movs	r2, #68	@ 0x44
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2245      	movs	r2, #69	@ 0x45
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	223d      	movs	r2, #61	@ 0x3d
 8003a12:	2101      	movs	r1, #1
 8003a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x22>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	223e      	movs	r2, #62	@ 0x3e
 8003a44:	5c9b      	ldrb	r3, [r3, r2]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	1e5a      	subs	r2, r3, #1
 8003a4c:	4193      	sbcs	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e01f      	b.n	8003a92 <HAL_TIM_PWM_Start+0x62>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d108      	bne.n	8003a6a <HAL_TIM_PWM_Start+0x3a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	223f      	movs	r2, #63	@ 0x3f
 8003a5c:	5c9b      	ldrb	r3, [r3, r2]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	1e5a      	subs	r2, r3, #1
 8003a64:	4193      	sbcs	r3, r2
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e013      	b.n	8003a92 <HAL_TIM_PWM_Start+0x62>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d108      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x52>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2240      	movs	r2, #64	@ 0x40
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	1e5a      	subs	r2, r3, #1
 8003a7c:	4193      	sbcs	r3, r2
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	e007      	b.n	8003a92 <HAL_TIM_PWM_Start+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2241      	movs	r2, #65	@ 0x41
 8003a86:	5c9b      	ldrb	r3, [r3, r2]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	4193      	sbcs	r3, r2
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e06e      	b.n	8003b78 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x7a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	223e      	movs	r2, #62	@ 0x3e
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	5499      	strb	r1, [r3, r2]
 8003aa8:	e013      	b.n	8003ad2 <HAL_TIM_PWM_Start+0xa2>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d104      	bne.n	8003aba <HAL_TIM_PWM_Start+0x8a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	223f      	movs	r2, #63	@ 0x3f
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	5499      	strb	r1, [r3, r2]
 8003ab8:	e00b      	b.n	8003ad2 <HAL_TIM_PWM_Start+0xa2>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d104      	bne.n	8003aca <HAL_TIM_PWM_Start+0x9a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	5499      	strb	r1, [r3, r2]
 8003ac8:	e003      	b.n	8003ad2 <HAL_TIM_PWM_Start+0xa2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	@ 0x41
 8003ace:	2102      	movs	r1, #2
 8003ad0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fcb6 	bl	800444c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	@ (8003b80 <HAL_TIM_PWM_Start+0x150>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00e      	beq.n	8003b08 <HAL_TIM_PWM_Start+0xd8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <HAL_TIM_PWM_Start+0x154>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_TIM_PWM_Start+0xd8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <HAL_TIM_PWM_Start+0x158>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d004      	beq.n	8003b08 <HAL_TIM_PWM_Start+0xd8>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <HAL_TIM_PWM_Start+0x15c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_PWM_Start+0xdc>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_TIM_PWM_Start+0xde>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2180      	movs	r1, #128	@ 0x80
 8003b1e:	0209      	lsls	r1, r1, #8
 8003b20:	430a      	orrs	r2, r1
 8003b22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <HAL_TIM_PWM_Start+0x150>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIM_PWM_Start+0x112>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a17      	ldr	r2, [pc, #92]	@ (8003b90 <HAL_TIM_PWM_Start+0x160>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIM_PWM_Start+0x112>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	@ (8003b84 <HAL_TIM_PWM_Start+0x154>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d111      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2207      	movs	r2, #7
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d010      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	430a      	orrs	r2, r1
 8003b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	e007      	b.n	8003b76 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2101      	movs	r1, #1
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40012c00 	.word	0x40012c00
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	40000400 	.word	0x40000400

08003b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d021      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	4252      	negs	r2, r2
 8003bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f99e 	bl	8003f1c <HAL_TIM_IC_CaptureCallback>
 8003be0:	e007      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f000 f991 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f99d 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	d01e      	beq.n	8003c46 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	4252      	negs	r2, r2
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	23c0      	movs	r3, #192	@ 0xc0
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 f977 	bl	8003f1c <HAL_TIM_IC_CaptureCallback>
 8003c2e:	e007      	b.n	8003c40 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f96a 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 f976 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d021      	beq.n	8003c92 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2208      	movs	r2, #8
 8003c52:	4013      	ands	r3, r2
 8003c54:	d01d      	beq.n	8003c92 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2209      	movs	r2, #9
 8003c5c:	4252      	negs	r2, r2
 8003c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2204      	movs	r2, #4
 8003c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 f951 	bl	8003f1c <HAL_TIM_IC_CaptureCallback>
 8003c7a:	e007      	b.n	8003c8c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 f944 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 f950 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2210      	movs	r2, #16
 8003c96:	4013      	ands	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d01e      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2211      	movs	r2, #17
 8003ca8:	4252      	negs	r2, r2
 8003caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69da      	ldr	r2, [r3, #28]
 8003cb8:	23c0      	movs	r3, #192	@ 0xc0
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d004      	beq.n	8003cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 f92a 	bl	8003f1c <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e007      	b.n	8003cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f000 f91d 	bl	8003f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f000 f929 	bl	8003f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d00c      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	d008      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	4252      	negs	r2, r2
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 f8fd 	bl	8003efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2280      	movs	r2, #128	@ 0x80
 8003d06:	4013      	ands	r3, r2
 8003d08:	d00c      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d008      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2281      	movs	r2, #129	@ 0x81
 8003d18:	4252      	negs	r2, r2
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fc1e 	bl	8004560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2240      	movs	r2, #64	@ 0x40
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d00c      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	4013      	ands	r3, r2
 8003d32:	d008      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2241      	movs	r2, #65	@ 0x41
 8003d3a:	4252      	negs	r2, r2
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0018      	movs	r0, r3
 8003d42:	f000 f8fb 	bl	8003f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d00c      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	4013      	ands	r3, r2
 8003d54:	d008      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2221      	movs	r2, #33	@ 0x21
 8003d5c:	4252      	negs	r2, r2
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 fbf4 	bl	8004550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b004      	add	sp, #16
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2317      	movs	r3, #23
 8003d7e:	18fb      	adds	r3, r7, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	223c      	movs	r2, #60	@ 0x3c
 8003d88:	5c9b      	ldrb	r3, [r3, r2]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e0ad      	b.n	8003eee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	223c      	movs	r2, #60	@ 0x3c
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	d100      	bne.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003da0:	e076      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d900      	bls.n	8003daa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003da8:	e095      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d04e      	beq.n	8003e4e <HAL_TIM_PWM_ConfigChannel+0xde>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d900      	bls.n	8003db8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003db6:	e08e      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d021      	beq.n	8003e08 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003dc4:	e087      	b.n	8003ed6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	0011      	movs	r1, r2
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 f940 	bl	8004054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2108      	movs	r1, #8
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2104      	movs	r1, #4
 8003df0:	438a      	bics	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6999      	ldr	r1, [r3, #24]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	619a      	str	r2, [r3, #24]
      break;
 8003e06:	e06b      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f000 f9a7 	bl	8004164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2180      	movs	r1, #128	@ 0x80
 8003e22:	0109      	lsls	r1, r1, #4
 8003e24:	430a      	orrs	r2, r1
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4931      	ldr	r1, [pc, #196]	@ (8003ef8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	021a      	lsls	r2, r3, #8
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	619a      	str	r2, [r3, #24]
      break;
 8003e4c:	e048      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	0011      	movs	r1, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f000 fa08 	bl	800426c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2108      	movs	r1, #8
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69da      	ldr	r2, [r3, #28]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2104      	movs	r1, #4
 8003e78:	438a      	bics	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69d9      	ldr	r1, [r3, #28]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	61da      	str	r2, [r3, #28]
      break;
 8003e8e:	e027      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f000 fa6d 	bl	8004378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2180      	movs	r1, #128	@ 0x80
 8003eaa:	0109      	lsls	r1, r1, #4
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	490f      	ldr	r1, [pc, #60]	@ (8003ef8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69d9      	ldr	r1, [r3, #28]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	61da      	str	r2, [r3, #28]
      break;
 8003ed4:	e004      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ed6:	2317      	movs	r3, #23
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
      break;
 8003ede:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	223c      	movs	r2, #60	@ 0x3c
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ee8:	2317      	movs	r3, #23
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	781b      	ldrb	r3, [r3, #0]
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b006      	add	sp, #24
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	fffffbff 	.word	0xfffffbff

08003efc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f04:	46c0      	nop			@ (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f24:	46c0      	nop			@ (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b002      	add	sp, #8
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f44:	46c0      	nop			@ (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a36      	ldr	r2, [pc, #216]	@ (8004038 <TIM_Base_SetConfig+0xec>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x20>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a35      	ldr	r2, [pc, #212]	@ (800403c <TIM_Base_SetConfig+0xf0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d108      	bne.n	8003f7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2270      	movs	r2, #112	@ 0x70
 8003f70:	4393      	bics	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	@ (8004038 <TIM_Base_SetConfig+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_Base_SetConfig+0x62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a2c      	ldr	r2, [pc, #176]	@ (800403c <TIM_Base_SetConfig+0xf0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0x62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	@ (8004040 <TIM_Base_SetConfig+0xf4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0x62>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <TIM_Base_SetConfig+0xf8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0x62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <TIM_Base_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a28      	ldr	r2, [pc, #160]	@ (800404c <TIM_Base_SetConfig+0x100>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	@ (8004050 <TIM_Base_SetConfig+0x104>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2280      	movs	r2, #128	@ 0x80
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a13      	ldr	r2, [pc, #76]	@ (8004038 <TIM_Base_SetConfig+0xec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_Base_SetConfig+0xba>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <TIM_Base_SetConfig+0xf8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_Base_SetConfig+0xba>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <TIM_Base_SetConfig+0xfc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_Base_SetConfig+0xba>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a12      	ldr	r2, [pc, #72]	@ (800404c <TIM_Base_SetConfig+0x100>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d103      	bne.n	800400e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2201      	movs	r2, #1
 800401a:	4013      	ands	r3, r2
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2201      	movs	r2, #1
 8004026:	4393      	bics	r3, r2
 8004028:	001a      	movs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	611a      	str	r2, [r3, #16]
  }
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b004      	add	sp, #16
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40002000 	.word	0x40002000
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400
 800404c:	40014800 	.word	0x40014800
 8004050:	fffffcff 	.word	0xfffffcff

08004054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	2201      	movs	r2, #1
 800406a:	4393      	bics	r3, r2
 800406c:	001a      	movs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2270      	movs	r2, #112	@ 0x70
 8004082:	4393      	bics	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2203      	movs	r2, #3
 800408a:	4393      	bics	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2202      	movs	r2, #2
 800409c:	4393      	bics	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a27      	ldr	r2, [pc, #156]	@ (800414c <TIM_OC1_SetConfig+0xf8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_OC1_SetConfig+0x76>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <TIM_OC1_SetConfig+0xfc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_OC1_SetConfig+0x76>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a25      	ldr	r2, [pc, #148]	@ (8004154 <TIM_OC1_SetConfig+0x100>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC1_SetConfig+0x76>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a24      	ldr	r2, [pc, #144]	@ (8004158 <TIM_OC1_SetConfig+0x104>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10c      	bne.n	80040e4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2208      	movs	r2, #8
 80040ce:	4393      	bics	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2204      	movs	r2, #4
 80040e0:	4393      	bics	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a19      	ldr	r2, [pc, #100]	@ (800414c <TIM_OC1_SetConfig+0xf8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC1_SetConfig+0xb0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a18      	ldr	r2, [pc, #96]	@ (8004150 <TIM_OC1_SetConfig+0xfc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC1_SetConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a17      	ldr	r2, [pc, #92]	@ (8004154 <TIM_OC1_SetConfig+0x100>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC1_SetConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a16      	ldr	r2, [pc, #88]	@ (8004158 <TIM_OC1_SetConfig+0x104>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d111      	bne.n	8004128 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4a15      	ldr	r2, [pc, #84]	@ (800415c <TIM_OC1_SetConfig+0x108>)
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <TIM_OC1_SetConfig+0x10c>)
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b006      	add	sp, #24
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	fffffeff 	.word	0xfffffeff
 8004160:	fffffdff 	.word	0xfffffdff

08004164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	2210      	movs	r2, #16
 800417a:	4393      	bics	r3, r2
 800417c:	001a      	movs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a2e      	ldr	r2, [pc, #184]	@ (800424c <TIM_OC2_SetConfig+0xe8>)
 8004192:	4013      	ands	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a2d      	ldr	r2, [pc, #180]	@ (8004250 <TIM_OC2_SetConfig+0xec>)
 800419a:	4013      	ands	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2220      	movs	r2, #32
 80041ae:	4393      	bics	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a24      	ldr	r2, [pc, #144]	@ (8004254 <TIM_OC2_SetConfig+0xf0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10d      	bne.n	80041e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2280      	movs	r2, #128	@ 0x80
 80041ca:	4393      	bics	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	4393      	bics	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <TIM_OC2_SetConfig+0xf0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_OC2_SetConfig+0x9e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <TIM_OC2_SetConfig+0xf4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_OC2_SetConfig+0x9e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a19      	ldr	r2, [pc, #100]	@ (800425c <TIM_OC2_SetConfig+0xf8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC2_SetConfig+0x9e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a18      	ldr	r2, [pc, #96]	@ (8004260 <TIM_OC2_SetConfig+0xfc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d113      	bne.n	800422a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4a17      	ldr	r2, [pc, #92]	@ (8004264 <TIM_OC2_SetConfig+0x100>)
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4a16      	ldr	r2, [pc, #88]	@ (8004268 <TIM_OC2_SetConfig+0x104>)
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	46c0      	nop			@ (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b006      	add	sp, #24
 800424a:	bd80      	pop	{r7, pc}
 800424c:	ffff8fff 	.word	0xffff8fff
 8004250:	fffffcff 	.word	0xfffffcff
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	fffffbff 	.word	0xfffffbff
 8004268:	fffff7ff 	.word	0xfffff7ff

0800426c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4a33      	ldr	r2, [pc, #204]	@ (8004350 <TIM_OC3_SetConfig+0xe4>)
 8004282:	401a      	ands	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2270      	movs	r2, #112	@ 0x70
 8004298:	4393      	bics	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2203      	movs	r2, #3
 80042a0:	4393      	bics	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4a28      	ldr	r2, [pc, #160]	@ (8004354 <TIM_OC3_SetConfig+0xe8>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <TIM_OC3_SetConfig+0xec>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10d      	bne.n	80042e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	4a23      	ldr	r2, [pc, #140]	@ (800435c <TIM_OC3_SetConfig+0xf0>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004360 <TIM_OC3_SetConfig+0xf4>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004358 <TIM_OC3_SetConfig+0xec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_OC3_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <TIM_OC3_SetConfig+0xf8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_OC3_SetConfig+0x9a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004368 <TIM_OC3_SetConfig+0xfc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_OC3_SetConfig+0x9a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1a      	ldr	r2, [pc, #104]	@ (800436c <TIM_OC3_SetConfig+0x100>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d113      	bne.n	800432e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <TIM_OC3_SetConfig+0x104>)
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <TIM_OC3_SetConfig+0x108>)
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	46c0      	nop			@ (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	b006      	add	sp, #24
 800434e:	bd80      	pop	{r7, pc}
 8004350:	fffffeff 	.word	0xfffffeff
 8004354:	fffffdff 	.word	0xfffffdff
 8004358:	40012c00 	.word	0x40012c00
 800435c:	fffff7ff 	.word	0xfffff7ff
 8004360:	fffffbff 	.word	0xfffffbff
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	ffffefff 	.word	0xffffefff
 8004374:	ffffdfff 	.word	0xffffdfff

08004378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4a26      	ldr	r2, [pc, #152]	@ (8004428 <TIM_OC4_SetConfig+0xb0>)
 800438e:	401a      	ands	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a22      	ldr	r2, [pc, #136]	@ (800442c <TIM_OC4_SetConfig+0xb4>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a21      	ldr	r2, [pc, #132]	@ (8004430 <TIM_OC4_SetConfig+0xb8>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4a1d      	ldr	r2, [pc, #116]	@ (8004434 <TIM_OC4_SetConfig+0xbc>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a19      	ldr	r2, [pc, #100]	@ (8004438 <TIM_OC4_SetConfig+0xc0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_OC4_SetConfig+0x78>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a18      	ldr	r2, [pc, #96]	@ (800443c <TIM_OC4_SetConfig+0xc4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <TIM_OC4_SetConfig+0x78>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a17      	ldr	r2, [pc, #92]	@ (8004440 <TIM_OC4_SetConfig+0xc8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC4_SetConfig+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <TIM_OC4_SetConfig+0xcc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d109      	bne.n	8004404 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4a15      	ldr	r2, [pc, #84]	@ (8004448 <TIM_OC4_SetConfig+0xd0>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b006      	add	sp, #24
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	ffffefff 	.word	0xffffefff
 800442c:	ffff8fff 	.word	0xffff8fff
 8004430:	fffffcff 	.word	0xfffffcff
 8004434:	ffffdfff 	.word	0xffffdfff
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800
 8004448:	ffffbfff 	.word	0xffffbfff

0800444c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	221f      	movs	r2, #31
 800445c:	4013      	ands	r3, r2
 800445e:	2201      	movs	r2, #1
 8004460:	409a      	lsls	r2, r3
 8004462:	0013      	movs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	43d2      	mvns	r2, r2
 800446e:	401a      	ands	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	211f      	movs	r1, #31
 800447c:	400b      	ands	r3, r1
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4099      	lsls	r1, r3
 8004482:	000b      	movs	r3, r1
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	223c      	movs	r2, #60	@ 0x3c
 80044a6:	5c9b      	ldrb	r3, [r3, r2]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e03e      	b.n	800452e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	223c      	movs	r2, #60	@ 0x3c
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	22ff      	movs	r2, #255	@ 0xff
 80044bc:	4393      	bics	r3, r2
 80044be:	001a      	movs	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80044cc:	401a      	ands	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a18      	ldr	r2, [pc, #96]	@ (800453c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80044da:	401a      	ands	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80044e8:	401a      	ands	r2, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80044f6:	401a      	ands	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004504:	401a      	ands	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004512:	401a      	ands	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	223c      	movs	r2, #60	@ 0x3c
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b004      	add	sp, #16
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	fffffcff 	.word	0xfffffcff
 800453c:	fffffbff 	.word	0xfffffbff
 8004540:	fffff7ff 	.word	0xfffff7ff
 8004544:	ffffefff 	.word	0xffffefff
 8004548:	ffffdfff 	.word	0xffffdfff
 800454c:	ffffbfff 	.word	0xffffbfff

08004550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b002      	add	sp, #8
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004568:	46c0      	nop			@ (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	1dbb      	adds	r3, r7, #6
 800457c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004582:	2b20      	cmp	r3, #32
 8004584:	d000      	beq.n	8004588 <HAL_UART_Transmit_DMA+0x18>
 8004586:	e077      	b.n	8004678 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_Transmit_DMA+0x26>
 800458e:	1dbb      	adds	r3, r7, #6
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06f      	b.n	800467a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	2380      	movs	r3, #128	@ 0x80
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d109      	bne.n	80045ba <HAL_UART_Transmit_DMA+0x4a>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	d001      	beq.n	80045ba <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e05f      	b.n	800467a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1dba      	adds	r2, r7, #6
 80045c4:	2150      	movs	r1, #80	@ 0x50
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1dba      	adds	r2, r7, #6
 80045ce:	2152      	movs	r1, #82	@ 0x52
 80045d0:	8812      	ldrh	r2, [r2, #0]
 80045d2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2284      	movs	r2, #132	@ 0x84
 80045d8:	2100      	movs	r1, #0
 80045da:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2221      	movs	r2, #33	@ 0x21
 80045e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d027      	beq.n	800463a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	4a25      	ldr	r2, [pc, #148]	@ (8004684 <HAL_UART_Transmit_DMA+0x114>)
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a24      	ldr	r2, [pc, #144]	@ (8004688 <HAL_UART_Transmit_DMA+0x118>)
 80045f8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a23      	ldr	r2, [pc, #140]	@ (800468c <HAL_UART_Transmit_DMA+0x11c>)
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	2200      	movs	r2, #0
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004612:	0019      	movs	r1, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3328      	adds	r3, #40	@ 0x28
 800461a:	001a      	movs	r2, r3
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	f7fe f8ca 	bl	80027b8 <HAL_DMA_Start_IT>
 8004624:	1e03      	subs	r3, r0, #0
 8004626:	d008      	beq.n	800463a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2284      	movs	r2, #132	@ 0x84
 800462c:	2110      	movs	r1, #16
 800462e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e01f      	b.n	800467a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2240      	movs	r2, #64	@ 0x40
 8004640:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004642:	f3ef 8310 	mrs	r3, PRIMASK
 8004646:	613b      	str	r3, [r7, #16]
  return(result);
 8004648:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	2301      	movs	r3, #1
 800464e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f383 8810 	msr	PRIMASK, r3
}
 8004656:	46c0      	nop			@ (mov r8, r8)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2180      	movs	r1, #128	@ 0x80
 8004664:	430a      	orrs	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b008      	add	sp, #32
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	080056c1 	.word	0x080056c1
 8004688:	08005755 	.word	0x08005755
 800468c:	080058e3 	.word	0x080058e3

08004690 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	1dbb      	adds	r3, r7, #6
 800469c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2280      	movs	r2, #128	@ 0x80
 80046a2:	589b      	ldr	r3, [r3, r2]
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d145      	bne.n	8004734 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_UART_Receive_DMA+0x26>
 80046ae:	1dbb      	adds	r3, r7, #6
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e03d      	b.n	8004736 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	2380      	movs	r3, #128	@ 0x80
 80046c0:	015b      	lsls	r3, r3, #5
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d109      	bne.n	80046da <HAL_UART_Receive_DMA+0x4a>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2201      	movs	r2, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	d001      	beq.n	80046da <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e02d      	b.n	8004736 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	2380      	movs	r3, #128	@ 0x80
 80046e8:	041b      	lsls	r3, r3, #16
 80046ea:	4013      	ands	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ee:	f3ef 8310 	mrs	r3, PRIMASK
 80046f2:	613b      	str	r3, [r7, #16]
  return(result);
 80046f4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f383 8810 	msr	PRIMASK, r3
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	04c9      	lsls	r1, r1, #19
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004722:	1dbb      	adds	r3, r7, #6
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fea0 	bl	8005470 <UART_Start_Receive_DMA>
 8004730:	0003      	movs	r3, r0
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b008      	add	sp, #32
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08c      	sub	sp, #48	@ 0x30
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	@ 0x80
 8004750:	589b      	ldr	r3, [r3, r2]
 8004752:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2280      	movs	r2, #128	@ 0x80
 800475c:	4013      	ands	r3, r2
 800475e:	2b80      	cmp	r3, #128	@ 0x80
 8004760:	d138      	bne.n	80047d4 <HAL_UART_DMAStop+0x96>
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2b21      	cmp	r3, #33	@ 0x21
 8004766:	d135      	bne.n	80047d4 <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004768:	f3ef 8310 	mrs	r3, PRIMASK
 800476c:	617b      	str	r3, [r7, #20]
  return(result);
 800476e:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f383 8810 	msr	PRIMASK, r3
}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2180      	movs	r1, #128	@ 0x80
 800478a:	438a      	bics	r2, r1
 800478c:	609a      	str	r2, [r3, #8]
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe f86c 	bl	8002884 <HAL_DMA_Abort>
 80047ac:	1e03      	subs	r3, r0, #0
 80047ae:	d00d      	beq.n	80047cc <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fe f984 	bl	8002ac2 <HAL_DMA_GetError>
 80047ba:	0003      	movs	r3, r0
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d105      	bne.n	80047cc <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2284      	movs	r2, #132	@ 0x84
 80047c4:	2110      	movs	r1, #16
 80047c6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e044      	b.n	8004856 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f000 feee 	bl	80055b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2240      	movs	r2, #64	@ 0x40
 80047dc:	4013      	ands	r3, r2
 80047de:	2b40      	cmp	r3, #64	@ 0x40
 80047e0:	d138      	bne.n	8004854 <HAL_UART_DMAStop+0x116>
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	2b22      	cmp	r3, #34	@ 0x22
 80047e6:	d135      	bne.n	8004854 <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ee:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f0:	623b      	str	r3, [r7, #32]
 80047f2:	2301      	movs	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			@ (mov r8, r8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2140      	movs	r1, #64	@ 0x40
 800480a:	438a      	bics	r2, r1
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f383 8810 	msr	PRIMASK, r3
}
 8004818:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	0018      	movs	r0, r3
 8004828:	f7fe f82c 	bl	8002884 <HAL_DMA_Abort>
 800482c:	1e03      	subs	r3, r0, #0
 800482e:	d00d      	beq.n	800484c <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004834:	0018      	movs	r0, r3
 8004836:	f7fe f944 	bl	8002ac2 <HAL_DMA_GetError>
 800483a:	0003      	movs	r3, r0
 800483c:	2b20      	cmp	r3, #32
 800483e:	d105      	bne.n	800484c <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2284      	movs	r2, #132	@ 0x84
 8004844:	2110      	movs	r1, #16
 8004846:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e004      	b.n	8004856 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fed2 	bl	80055f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b00c      	add	sp, #48	@ 0x30
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b0ab      	sub	sp, #172	@ 0xac
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	22a4      	movs	r2, #164	@ 0xa4
 8004870:	18b9      	adds	r1, r7, r2
 8004872:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	20a0      	movs	r0, #160	@ 0xa0
 800487c:	1839      	adds	r1, r7, r0
 800487e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	219c      	movs	r1, #156	@ 0x9c
 8004888:	1879      	adds	r1, r7, r1
 800488a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800488c:	0011      	movs	r1, r2
 800488e:	18bb      	adds	r3, r7, r2
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a99      	ldr	r2, [pc, #612]	@ (8004af8 <HAL_UART_IRQHandler+0x298>)
 8004894:	4013      	ands	r3, r2
 8004896:	2298      	movs	r2, #152	@ 0x98
 8004898:	18bc      	adds	r4, r7, r2
 800489a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800489c:	18bb      	adds	r3, r7, r2
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d114      	bne.n	80048ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80048a4:	187b      	adds	r3, r7, r1
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2220      	movs	r2, #32
 80048aa:	4013      	ands	r3, r2
 80048ac:	d00f      	beq.n	80048ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048ae:	183b      	adds	r3, r7, r0
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2220      	movs	r2, #32
 80048b4:	4013      	ands	r3, r2
 80048b6:	d00a      	beq.n	80048ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d100      	bne.n	80048c2 <HAL_UART_IRQHandler+0x62>
 80048c0:	e286      	b.n	8004dd0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	0010      	movs	r0, r2
 80048ca:	4798      	blx	r3
      }
      return;
 80048cc:	e280      	b.n	8004dd0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048ce:	2398      	movs	r3, #152	@ 0x98
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d100      	bne.n	80048da <HAL_UART_IRQHandler+0x7a>
 80048d8:	e114      	b.n	8004b04 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048da:	239c      	movs	r3, #156	@ 0x9c
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	d106      	bne.n	80048f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048e6:	23a0      	movs	r3, #160	@ 0xa0
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a83      	ldr	r2, [pc, #524]	@ (8004afc <HAL_UART_IRQHandler+0x29c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	d100      	bne.n	80048f4 <HAL_UART_IRQHandler+0x94>
 80048f2:	e107      	b.n	8004b04 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048f4:	23a4      	movs	r3, #164	@ 0xa4
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	d012      	beq.n	8004926 <HAL_UART_IRQHandler+0xc6>
 8004900:	23a0      	movs	r3, #160	@ 0xa0
 8004902:	18fb      	adds	r3, r7, r3
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4013      	ands	r3, r2
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2201      	movs	r2, #1
 8004914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2284      	movs	r2, #132	@ 0x84
 800491a:	589b      	ldr	r3, [r3, r2]
 800491c:	2201      	movs	r2, #1
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2184      	movs	r1, #132	@ 0x84
 8004924:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004926:	23a4      	movs	r3, #164	@ 0xa4
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d011      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
 8004932:	239c      	movs	r3, #156	@ 0x9c
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	d00b      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2202      	movs	r2, #2
 8004944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2284      	movs	r2, #132	@ 0x84
 800494a:	589b      	ldr	r3, [r3, r2]
 800494c:	2204      	movs	r2, #4
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2184      	movs	r1, #132	@ 0x84
 8004954:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004956:	23a4      	movs	r3, #164	@ 0xa4
 8004958:	18fb      	adds	r3, r7, r3
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2204      	movs	r2, #4
 800495e:	4013      	ands	r3, r2
 8004960:	d011      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
 8004962:	239c      	movs	r3, #156	@ 0x9c
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	4013      	ands	r3, r2
 800496c:	d00b      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2204      	movs	r2, #4
 8004974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2284      	movs	r2, #132	@ 0x84
 800497a:	589b      	ldr	r3, [r3, r2]
 800497c:	2202      	movs	r2, #2
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2184      	movs	r1, #132	@ 0x84
 8004984:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004986:	23a4      	movs	r3, #164	@ 0xa4
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	4013      	ands	r3, r2
 8004990:	d017      	beq.n	80049c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004992:	23a0      	movs	r3, #160	@ 0xa0
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2220      	movs	r2, #32
 800499a:	4013      	ands	r3, r2
 800499c:	d105      	bne.n	80049aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800499e:	239c      	movs	r3, #156	@ 0x9c
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049a8:	d00b      	beq.n	80049c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2208      	movs	r2, #8
 80049b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2284      	movs	r2, #132	@ 0x84
 80049b6:	589b      	ldr	r3, [r3, r2]
 80049b8:	2208      	movs	r2, #8
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2184      	movs	r1, #132	@ 0x84
 80049c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049c2:	23a4      	movs	r3, #164	@ 0xa4
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	4013      	ands	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_UART_IRQHandler+0x198>
 80049d0:	23a0      	movs	r3, #160	@ 0xa0
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	04db      	lsls	r3, r3, #19
 80049da:	4013      	ands	r3, r2
 80049dc:	d00c      	beq.n	80049f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2280      	movs	r2, #128	@ 0x80
 80049e4:	0112      	lsls	r2, r2, #4
 80049e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2284      	movs	r2, #132	@ 0x84
 80049ec:	589b      	ldr	r3, [r3, r2]
 80049ee:	2220      	movs	r2, #32
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2184      	movs	r1, #132	@ 0x84
 80049f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2284      	movs	r2, #132	@ 0x84
 80049fc:	589b      	ldr	r3, [r3, r2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d100      	bne.n	8004a04 <HAL_UART_IRQHandler+0x1a4>
 8004a02:	e1e7      	b.n	8004dd4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a04:	23a4      	movs	r3, #164	@ 0xa4
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a10:	23a0      	movs	r3, #160	@ 0xa0
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2220      	movs	r2, #32
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d008      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2284      	movs	r2, #132	@ 0x84
 8004a32:	589b      	ldr	r3, [r3, r2]
 8004a34:	2194      	movs	r1, #148	@ 0x94
 8004a36:	187a      	adds	r2, r7, r1
 8004a38:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2240      	movs	r2, #64	@ 0x40
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b40      	cmp	r3, #64	@ 0x40
 8004a46:	d004      	beq.n	8004a52 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2228      	movs	r2, #40	@ 0x28
 8004a4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a50:	d047      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fdcf 	bl	80055f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2240      	movs	r2, #64	@ 0x40
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b40      	cmp	r3, #64	@ 0x40
 8004a66:	d137      	bne.n	8004ad8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a70:	2090      	movs	r0, #144	@ 0x90
 8004a72:	183a      	adds	r2, r7, r0
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	2301      	movs	r3, #1
 8004a78:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a7c:	f383 8810 	msr	PRIMASK, r3
}
 8004a80:	46c0      	nop			@ (mov r8, r8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2140      	movs	r1, #64	@ 0x40
 8004a8e:	438a      	bics	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	183b      	adds	r3, r7, r0
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aac:	4a14      	ldr	r2, [pc, #80]	@ (8004b00 <HAL_UART_IRQHandler+0x2a0>)
 8004aae:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f7fd ff1d 	bl	80028f4 <HAL_DMA_Abort_IT>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d01a      	beq.n	8004af4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac8:	0018      	movs	r0, r3
 8004aca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e012      	b.n	8004af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f9ad 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad6:	e00d      	b.n	8004af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 f9a8 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e008      	b.n	8004af4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 f9a3 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2284      	movs	r2, #132	@ 0x84
 8004aee:	2100      	movs	r1, #0
 8004af0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004af2:	e16f      	b.n	8004dd4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	46c0      	nop			@ (mov r8, r8)
    return;
 8004af6:	e16d      	b.n	8004dd4 <HAL_UART_IRQHandler+0x574>
 8004af8:	0000080f 	.word	0x0000080f
 8004afc:	04000120 	.word	0x04000120
 8004b00:	08005967 	.word	0x08005967

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d000      	beq.n	8004b0e <HAL_UART_IRQHandler+0x2ae>
 8004b0c:	e139      	b.n	8004d82 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b0e:	23a4      	movs	r3, #164	@ 0xa4
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2210      	movs	r2, #16
 8004b16:	4013      	ands	r3, r2
 8004b18:	d100      	bne.n	8004b1c <HAL_UART_IRQHandler+0x2bc>
 8004b1a:	e132      	b.n	8004d82 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b1c:	23a0      	movs	r3, #160	@ 0xa0
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2210      	movs	r2, #16
 8004b24:	4013      	ands	r3, r2
 8004b26:	d100      	bne.n	8004b2a <HAL_UART_IRQHandler+0x2ca>
 8004b28:	e12b      	b.n	8004d82 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2240      	movs	r2, #64	@ 0x40
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d000      	beq.n	8004b42 <HAL_UART_IRQHandler+0x2e2>
 8004b40:	e09f      	b.n	8004c82 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	217e      	movs	r1, #126	@ 0x7e
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d100      	bne.n	8004b5a <HAL_UART_IRQHandler+0x2fa>
 8004b58:	e13e      	b.n	8004dd8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2258      	movs	r2, #88	@ 0x58
 8004b5e:	5a9b      	ldrh	r3, [r3, r2]
 8004b60:	187a      	adds	r2, r7, r1
 8004b62:	8812      	ldrh	r2, [r2, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d300      	bcc.n	8004b6a <HAL_UART_IRQHandler+0x30a>
 8004b68:	e136      	b.n	8004dd8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	187a      	adds	r2, r7, r1
 8004b6e:	215a      	movs	r1, #90	@ 0x5a
 8004b70:	8812      	ldrh	r2, [r2, #0]
 8004b72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d06f      	beq.n	8004c5e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b88:	2301      	movs	r3, #1
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4992      	ldr	r1, [pc, #584]	@ (8004de8 <HAL_UART_IRQHandler+0x588>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bba:	2301      	movs	r3, #1
 8004bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			@ (mov r8, r8)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	438a      	bics	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
 8004bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be2:	f3ef 8310 	mrs	r3, PRIMASK
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bec:	2301      	movs	r3, #1
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf2:	f383 8810 	msr	PRIMASK, r3
}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	438a      	bics	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c0a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2280      	movs	r2, #128	@ 0x80
 8004c18:	2120      	movs	r1, #32
 8004c1a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8310 	mrs	r3, PRIMASK
 8004c26:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c32:	f383 8810 	msr	PRIMASK, r3
}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2110      	movs	r1, #16
 8004c44:	438a      	bics	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7fd fe13 	bl	8002884 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2258      	movs	r2, #88	@ 0x58
 8004c68:	5a9a      	ldrh	r2, [r3, r2]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	215a      	movs	r1, #90	@ 0x5a
 8004c6e:	5a5b      	ldrh	r3, [r3, r1]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	0011      	movs	r1, r2
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 f8e0 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c80:	e0aa      	b.n	8004dd8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2258      	movs	r2, #88	@ 0x58
 8004c86:	5a99      	ldrh	r1, [r3, r2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	225a      	movs	r2, #90	@ 0x5a
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	208e      	movs	r0, #142	@ 0x8e
 8004c92:	183b      	adds	r3, r7, r0
 8004c94:	1a8a      	subs	r2, r1, r2
 8004c96:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	225a      	movs	r2, #90	@ 0x5a
 8004c9c:	5a9b      	ldrh	r3, [r3, r2]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x446>
 8004ca4:	e09a      	b.n	8004ddc <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004ca6:	183b      	adds	r3, r7, r0
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d100      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x450>
 8004cae:	e095      	b.n	8004ddc <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb8:	2488      	movs	r4, #136	@ 0x88
 8004cba:	193a      	adds	r2, r7, r4
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f383 8810 	msr	PRIMASK, r3
}
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4945      	ldr	r1, [pc, #276]	@ (8004dec <HAL_UART_IRQHandler+0x58c>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	193b      	adds	r3, r7, r4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cec:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	2484      	movs	r4, #132	@ 0x84
 8004cf2:	193a      	adds	r2, r7, r4
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			@ (mov r8, r8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	438a      	bics	r2, r1
 8004d10:	609a      	str	r2, [r3, #8]
 8004d12:	193b      	adds	r3, r7, r4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2280      	movs	r2, #128	@ 0x80
 8004d24:	2120      	movs	r1, #32
 8004d26:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d34:	f3ef 8310 	mrs	r3, PRIMASK
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	2480      	movs	r4, #128	@ 0x80
 8004d3e:	193a      	adds	r2, r7, r4
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	2301      	movs	r3, #1
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			@ (mov r8, r8)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2110      	movs	r1, #16
 8004d5a:	438a      	bics	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	f383 8810 	msr	PRIMASK, r3
}
 8004d6a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d72:	183b      	adds	r3, r7, r0
 8004d74:	881a      	ldrh	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f860 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d80:	e02c      	b.n	8004ddc <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d82:	23a4      	movs	r3, #164	@ 0xa4
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2280      	movs	r2, #128	@ 0x80
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d00f      	beq.n	8004dae <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d8e:	23a0      	movs	r3, #160	@ 0xa0
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2280      	movs	r2, #128	@ 0x80
 8004d96:	4013      	ands	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01e      	beq.n	8004de0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	0010      	movs	r0, r2
 8004daa:	4798      	blx	r3
    }
    return;
 8004dac:	e018      	b.n	8004de0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dae:	23a4      	movs	r3, #164	@ 0xa4
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2240      	movs	r2, #64	@ 0x40
 8004db6:	4013      	ands	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_UART_IRQHandler+0x582>
 8004dba:	23a0      	movs	r3, #160	@ 0xa0
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2240      	movs	r2, #64	@ 0x40
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 fde3 	bl	8005994 <UART_EndTransmit_IT>
    return;
 8004dce:	e008      	b.n	8004de2 <HAL_UART_IRQHandler+0x582>
      return;
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	e006      	b.n	8004de2 <HAL_UART_IRQHandler+0x582>
    return;
 8004dd4:	46c0      	nop			@ (mov r8, r8)
 8004dd6:	e004      	b.n	8004de2 <HAL_UART_IRQHandler+0x582>
      return;
 8004dd8:	46c0      	nop			@ (mov r8, r8)
 8004dda:	e002      	b.n	8004de2 <HAL_UART_IRQHandler+0x582>
      return;
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	e000      	b.n	8004de2 <HAL_UART_IRQHandler+0x582>
    return;
 8004de0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b02b      	add	sp, #172	@ 0xac
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	fffffeff 	.word	0xfffffeff
 8004dec:	fffffedf 	.word	0xfffffedf

08004df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004df8:	46c0      	nop			@ (mov r8, r8)
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e08:	46c0      	nop			@ (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e28:	46c0      	nop			@ (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	000a      	movs	r2, r1
 8004e4a:	1cbb      	adds	r3, r7, #2
 8004e4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b002      	add	sp, #8
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e60:	231e      	movs	r3, #30
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a8d      	ldr	r2, [pc, #564]	@ (80050bc <UART_SetConfig+0x264>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a88      	ldr	r2, [pc, #544]	@ (80050c0 <UART_SetConfig+0x268>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4a7f      	ldr	r2, [pc, #508]	@ (80050c4 <UART_SetConfig+0x26c>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a7b      	ldr	r2, [pc, #492]	@ (80050c8 <UART_SetConfig+0x270>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d127      	bne.n	8004f2e <UART_SetConfig+0xd6>
 8004ede:	4b7b      	ldr	r3, [pc, #492]	@ (80050cc <UART_SetConfig+0x274>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d00d      	beq.n	8004f06 <UART_SetConfig+0xae>
 8004eea:	d81b      	bhi.n	8004f24 <UART_SetConfig+0xcc>
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d014      	beq.n	8004f1a <UART_SetConfig+0xc2>
 8004ef0:	d818      	bhi.n	8004f24 <UART_SetConfig+0xcc>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <UART_SetConfig+0xa4>
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d00a      	beq.n	8004f10 <UART_SetConfig+0xb8>
 8004efa:	e013      	b.n	8004f24 <UART_SetConfig+0xcc>
 8004efc:	231f      	movs	r3, #31
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e021      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f06:	231f      	movs	r3, #31
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e01c      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f10:	231f      	movs	r3, #31
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	2204      	movs	r2, #4
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e017      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f1a:	231f      	movs	r3, #31
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e012      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f24:	231f      	movs	r3, #31
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	2210      	movs	r2, #16
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a67      	ldr	r2, [pc, #412]	@ (80050d0 <UART_SetConfig+0x278>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d104      	bne.n	8004f42 <UART_SetConfig+0xea>
 8004f38:	231f      	movs	r3, #31
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	e003      	b.n	8004f4a <UART_SetConfig+0xf2>
 8004f42:	231f      	movs	r3, #31
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2210      	movs	r2, #16
 8004f48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	2380      	movs	r3, #128	@ 0x80
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d15c      	bne.n	8005010 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004f56:	231f      	movs	r3, #31
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d015      	beq.n	8004f8c <UART_SetConfig+0x134>
 8004f60:	dc18      	bgt.n	8004f94 <UART_SetConfig+0x13c>
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d00d      	beq.n	8004f82 <UART_SetConfig+0x12a>
 8004f66:	dc15      	bgt.n	8004f94 <UART_SetConfig+0x13c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <UART_SetConfig+0x11a>
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d005      	beq.n	8004f7c <UART_SetConfig+0x124>
 8004f70:	e010      	b.n	8004f94 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7fe fbd1 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61bb      	str	r3, [r7, #24]
        break;
 8004f7a:	e012      	b.n	8004fa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f7c:	4b55      	ldr	r3, [pc, #340]	@ (80050d4 <UART_SetConfig+0x27c>)
 8004f7e:	61bb      	str	r3, [r7, #24]
        break;
 8004f80:	e00f      	b.n	8004fa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f82:	f7fe fb67 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8004f86:	0003      	movs	r3, r0
 8004f88:	61bb      	str	r3, [r7, #24]
        break;
 8004f8a:	e00a      	b.n	8004fa2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	61bb      	str	r3, [r7, #24]
        break;
 8004f92:	e006      	b.n	8004fa2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f98:	231e      	movs	r3, #30
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	701a      	strb	r2, [r3, #0]
        break;
 8004fa0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d100      	bne.n	8004faa <UART_SetConfig+0x152>
 8004fa8:	e07a      	b.n	80050a0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	005a      	lsls	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	18d2      	adds	r2, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	0019      	movs	r1, r3
 8004fbc:	0010      	movs	r0, r2
 8004fbe:	f7fb f8a3 	bl	8000108 <__udivsi3>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d91c      	bls.n	8005006 <UART_SetConfig+0x1ae>
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	025b      	lsls	r3, r3, #9
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d217      	bcs.n	8005006 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	200e      	movs	r0, #14
 8004fdc:	183b      	adds	r3, r7, r0
 8004fde:	210f      	movs	r1, #15
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2207      	movs	r2, #7
 8004fec:	4013      	ands	r3, r2
 8004fee:	b299      	uxth	r1, r3
 8004ff0:	183b      	adds	r3, r7, r0
 8004ff2:	183a      	adds	r2, r7, r0
 8004ff4:	8812      	ldrh	r2, [r2, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	183a      	adds	r2, r7, r0
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	60da      	str	r2, [r3, #12]
 8005004:	e04c      	b.n	80050a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005006:	231e      	movs	r3, #30
 8005008:	18fb      	adds	r3, r7, r3
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e047      	b.n	80050a0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005010:	231f      	movs	r3, #31
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b08      	cmp	r3, #8
 8005018:	d015      	beq.n	8005046 <UART_SetConfig+0x1ee>
 800501a:	dc18      	bgt.n	800504e <UART_SetConfig+0x1f6>
 800501c:	2b04      	cmp	r3, #4
 800501e:	d00d      	beq.n	800503c <UART_SetConfig+0x1e4>
 8005020:	dc15      	bgt.n	800504e <UART_SetConfig+0x1f6>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <UART_SetConfig+0x1d4>
 8005026:	2b02      	cmp	r3, #2
 8005028:	d005      	beq.n	8005036 <UART_SetConfig+0x1de>
 800502a:	e010      	b.n	800504e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe fb74 	bl	8003718 <HAL_RCC_GetPCLK1Freq>
 8005030:	0003      	movs	r3, r0
 8005032:	61bb      	str	r3, [r7, #24]
        break;
 8005034:	e012      	b.n	800505c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005036:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <UART_SetConfig+0x27c>)
 8005038:	61bb      	str	r3, [r7, #24]
        break;
 800503a:	e00f      	b.n	800505c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503c:	f7fe fb0a 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8005040:	0003      	movs	r3, r0
 8005042:	61bb      	str	r3, [r7, #24]
        break;
 8005044:	e00a      	b.n	800505c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	61bb      	str	r3, [r7, #24]
        break;
 800504c:	e006      	b.n	800505c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005052:	231e      	movs	r3, #30
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
        break;
 800505a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01e      	beq.n	80050a0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	085a      	lsrs	r2, r3, #1
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	18d2      	adds	r2, r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0019      	movs	r1, r3
 8005072:	0010      	movs	r0, r2
 8005074:	f7fb f848 	bl	8000108 <__udivsi3>
 8005078:	0003      	movs	r3, r0
 800507a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0f      	cmp	r3, #15
 8005080:	d90a      	bls.n	8005098 <UART_SetConfig+0x240>
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	025b      	lsls	r3, r3, #9
 8005088:	429a      	cmp	r2, r3
 800508a:	d205      	bcs.n	8005098 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	b29a      	uxth	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	e003      	b.n	80050a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005098:	231e      	movs	r3, #30
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	2201      	movs	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050ac:	231e      	movs	r3, #30
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	781b      	ldrb	r3, [r3, #0]
}
 80050b2:	0018      	movs	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b008      	add	sp, #32
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	ffff69f3 	.word	0xffff69f3
 80050c0:	ffffcfff 	.word	0xffffcfff
 80050c4:	fffff4ff 	.word	0xfffff4ff
 80050c8:	40013800 	.word	0x40013800
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40004400 	.word	0x40004400
 80050d4:	007a1200 	.word	0x007a1200

080050d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	2208      	movs	r2, #8
 80050e6:	4013      	ands	r3, r2
 80050e8:	d00b      	beq.n	8005102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4a4a      	ldr	r2, [pc, #296]	@ (800521c <UART_AdvFeatureConfig+0x144>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	0019      	movs	r1, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	2201      	movs	r2, #1
 8005108:	4013      	ands	r3, r2
 800510a:	d00b      	beq.n	8005124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4a43      	ldr	r2, [pc, #268]	@ (8005220 <UART_AdvFeatureConfig+0x148>)
 8005114:	4013      	ands	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	2202      	movs	r2, #2
 800512a:	4013      	ands	r3, r2
 800512c:	d00b      	beq.n	8005146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a3b      	ldr	r2, [pc, #236]	@ (8005224 <UART_AdvFeatureConfig+0x14c>)
 8005136:	4013      	ands	r3, r2
 8005138:	0019      	movs	r1, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	d00b      	beq.n	8005168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4a34      	ldr	r2, [pc, #208]	@ (8005228 <UART_AdvFeatureConfig+0x150>)
 8005158:	4013      	ands	r3, r2
 800515a:	0019      	movs	r1, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	2210      	movs	r2, #16
 800516e:	4013      	ands	r3, r2
 8005170:	d00b      	beq.n	800518a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a2c      	ldr	r2, [pc, #176]	@ (800522c <UART_AdvFeatureConfig+0x154>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	2220      	movs	r2, #32
 8005190:	4013      	ands	r3, r2
 8005192:	d00b      	beq.n	80051ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	4a25      	ldr	r2, [pc, #148]	@ (8005230 <UART_AdvFeatureConfig+0x158>)
 800519c:	4013      	ands	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2240      	movs	r2, #64	@ 0x40
 80051b2:	4013      	ands	r3, r2
 80051b4:	d01d      	beq.n	80051f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <UART_AdvFeatureConfig+0x15c>)
 80051be:	4013      	ands	r3, r2
 80051c0:	0019      	movs	r1, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d2:	2380      	movs	r3, #128	@ 0x80
 80051d4:	035b      	lsls	r3, r3, #13
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d10b      	bne.n	80051f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a15      	ldr	r2, [pc, #84]	@ (8005238 <UART_AdvFeatureConfig+0x160>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	2280      	movs	r2, #128	@ 0x80
 80051f8:	4013      	ands	r3, r2
 80051fa:	d00b      	beq.n	8005214 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a0e      	ldr	r2, [pc, #56]	@ (800523c <UART_AdvFeatureConfig+0x164>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }
}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	b002      	add	sp, #8
 800521a:	bd80      	pop	{r7, pc}
 800521c:	ffff7fff 	.word	0xffff7fff
 8005220:	fffdffff 	.word	0xfffdffff
 8005224:	fffeffff 	.word	0xfffeffff
 8005228:	fffbffff 	.word	0xfffbffff
 800522c:	ffffefff 	.word	0xffffefff
 8005230:	ffffdfff 	.word	0xffffdfff
 8005234:	ffefffff 	.word	0xffefffff
 8005238:	ff9fffff 	.word	0xff9fffff
 800523c:	fff7ffff 	.word	0xfff7ffff

08005240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b092      	sub	sp, #72	@ 0x48
 8005244:	af02      	add	r7, sp, #8
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2284      	movs	r2, #132	@ 0x84
 800524c:	2100      	movs	r1, #0
 800524e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005250:	f7fc fc32 	bl	8001ab8 <HAL_GetTick>
 8005254:	0003      	movs	r3, r0
 8005256:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2208      	movs	r2, #8
 8005260:	4013      	ands	r3, r2
 8005262:	2b08      	cmp	r3, #8
 8005264:	d12c      	bne.n	80052c0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005268:	2280      	movs	r2, #128	@ 0x80
 800526a:	0391      	lsls	r1, r2, #14
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4a46      	ldr	r2, [pc, #280]	@ (8005388 <UART_CheckIdleState+0x148>)
 8005270:	9200      	str	r2, [sp, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	f000 f88c 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 8005278:	1e03      	subs	r3, r0, #0
 800527a:	d021      	beq.n	80052c0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527c:	f3ef 8310 	mrs	r3, PRIMASK
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005286:	2301      	movs	r3, #1
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	f383 8810 	msr	PRIMASK, r3
}
 8005290:	46c0      	nop			@ (mov r8, r8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2180      	movs	r1, #128	@ 0x80
 800529e:	438a      	bics	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	f383 8810 	msr	PRIMASK, r3
}
 80052ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2278      	movs	r2, #120	@ 0x78
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e05f      	b.n	8005380 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2204      	movs	r2, #4
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d146      	bne.n	800535c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d0:	2280      	movs	r2, #128	@ 0x80
 80052d2:	03d1      	lsls	r1, r2, #15
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005388 <UART_CheckIdleState+0x148>)
 80052d8:	9200      	str	r2, [sp, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	f000 f858 	bl	8005390 <UART_WaitOnFlagUntilTimeout>
 80052e0:	1e03      	subs	r3, r0, #0
 80052e2:	d03b      	beq.n	800535c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e4:	f3ef 8310 	mrs	r3, PRIMASK
 80052e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052ea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ee:	2301      	movs	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f383 8810 	msr	PRIMASK, r3
}
 80052f8:	46c0      	nop			@ (mov r8, r8)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4921      	ldr	r1, [pc, #132]	@ (800538c <UART_CheckIdleState+0x14c>)
 8005306:	400a      	ands	r2, r1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005316:	f3ef 8310 	mrs	r3, PRIMASK
 800531a:	61bb      	str	r3, [r7, #24]
  return(result);
 800531c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005320:	2301      	movs	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f383 8810 	msr	PRIMASK, r3
}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2101      	movs	r1, #1
 8005338:	438a      	bics	r2, r1
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	f383 8810 	msr	PRIMASK, r3
}
 8005346:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2280      	movs	r2, #128	@ 0x80
 800534c:	2120      	movs	r1, #32
 800534e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2278      	movs	r2, #120	@ 0x78
 8005354:	2100      	movs	r1, #0
 8005356:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e011      	b.n	8005380 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2280      	movs	r2, #128	@ 0x80
 8005366:	2120      	movs	r1, #32
 8005368:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2278      	movs	r2, #120	@ 0x78
 800537a:	2100      	movs	r1, #0
 800537c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	0018      	movs	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	b010      	add	sp, #64	@ 0x40
 8005386:	bd80      	pop	{r7, pc}
 8005388:	01ffffff 	.word	0x01ffffff
 800538c:	fffffedf 	.word	0xfffffedf

08005390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a0:	e051      	b.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3301      	adds	r3, #1
 80053a6:	d04e      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fc fb86 	bl	8001ab8 <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <UART_WaitOnFlagUntilTimeout+0x2e>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e051      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2204      	movs	r2, #4
 80053ca:	4013      	ands	r3, r2
 80053cc:	d03b      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b80      	cmp	r3, #128	@ 0x80
 80053d2:	d038      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d035      	beq.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	2208      	movs	r2, #8
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d111      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2208      	movs	r2, #8
 80053ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f900 	bl	80055f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2284      	movs	r2, #132	@ 0x84
 80053fc:	2108      	movs	r1, #8
 80053fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2278      	movs	r2, #120	@ 0x78
 8005404:	2100      	movs	r1, #0
 8005406:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e02c      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	401a      	ands	r2, r3
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	429a      	cmp	r2, r3
 800541e:	d112      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2280      	movs	r2, #128	@ 0x80
 8005426:	0112      	lsls	r2, r2, #4
 8005428:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	0018      	movs	r0, r3
 800542e:	f000 f8e3 	bl	80055f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2284      	movs	r2, #132	@ 0x84
 8005436:	2120      	movs	r1, #32
 8005438:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2278      	movs	r2, #120	@ 0x78
 800543e:	2100      	movs	r1, #0
 8005440:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e00f      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	425a      	negs	r2, r3
 8005456:	4153      	adcs	r3, r2
 8005458:	b2db      	uxtb	r3, r3
 800545a:	001a      	movs	r2, r3
 800545c:	1dfb      	adds	r3, r7, #7
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d09e      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b090      	sub	sp, #64	@ 0x40
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	1dbb      	adds	r3, r7, #6
 800547c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	1dba      	adds	r2, r7, #6
 8005488:	2158      	movs	r1, #88	@ 0x58
 800548a:	8812      	ldrh	r2, [r2, #0]
 800548c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2284      	movs	r2, #132	@ 0x84
 8005492:	2100      	movs	r1, #0
 8005494:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2280      	movs	r2, #128	@ 0x80
 800549a:	2122      	movs	r1, #34	@ 0x22
 800549c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d028      	beq.n	80054f8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054aa:	4a3e      	ldr	r2, [pc, #248]	@ (80055a4 <UART_Start_Receive_DMA+0x134>)
 80054ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b2:	4a3d      	ldr	r2, [pc, #244]	@ (80055a8 <UART_Start_Receive_DMA+0x138>)
 80054b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ba:	4a3c      	ldr	r2, [pc, #240]	@ (80055ac <UART_Start_Receive_DMA+0x13c>)
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c2:	2200      	movs	r2, #0
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3324      	adds	r3, #36	@ 0x24
 80054d0:	0019      	movs	r1, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	001a      	movs	r2, r3
 80054d8:	1dbb      	adds	r3, r7, #6
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	f7fd f96c 	bl	80027b8 <HAL_DMA_Start_IT>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d009      	beq.n	80054f8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2284      	movs	r2, #132	@ 0x84
 80054e8:	2110      	movs	r1, #16
 80054ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2280      	movs	r2, #128	@ 0x80
 80054f0:	2120      	movs	r1, #32
 80054f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e050      	b.n	800559a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d019      	beq.n	8005534 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005500:	f3ef 8310 	mrs	r3, PRIMASK
 8005504:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800550a:	2301      	movs	r3, #1
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	f383 8810 	msr	PRIMASK, r3
}
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2180      	movs	r1, #128	@ 0x80
 8005522:	0049      	lsls	r1, r1, #1
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f383 8810 	msr	PRIMASK, r3
}
 8005532:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	613b      	str	r3, [r7, #16]
  return(result);
 800553a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800553e:	2301      	movs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			@ (mov r8, r8)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	61fb      	str	r3, [r7, #28]
  return(result);
 800556c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005570:	2301      	movs	r3, #1
 8005572:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2140      	movs	r1, #64	@ 0x40
 8005588:	430a      	orrs	r2, r1
 800558a:	609a      	str	r2, [r3, #8]
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b010      	add	sp, #64	@ 0x40
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	08005775 	.word	0x08005775
 80055a8:	080058a1 	.word	0x080058a1
 80055ac:	080058e3 	.word	0x080058e3

080055b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055b8:	f3ef 8310 	mrs	r3, PRIMASK
 80055bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80055be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	2301      	movs	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f383 8810 	msr	PRIMASK, r3
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	21c0      	movs	r1, #192	@ 0xc0
 80055da:	438a      	bics	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f383 8810 	msr	PRIMASK, r3
}
 80055e8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b006      	add	sp, #24
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08e      	sub	sp, #56	@ 0x38
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005600:	f3ef 8310 	mrs	r3, PRIMASK
 8005604:	617b      	str	r3, [r7, #20]
  return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
 800560a:	2301      	movs	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f383 8810 	msr	PRIMASK, r3
}
 8005614:	46c0      	nop			@ (mov r8, r8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4926      	ldr	r1, [pc, #152]	@ (80056bc <UART_EndRxTransfer+0xc4>)
 8005622:	400a      	ands	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005632:	f3ef 8310 	mrs	r3, PRIMASK
 8005636:	623b      	str	r3, [r7, #32]
  return(result);
 8005638:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30
 800563c:	2301      	movs	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2101      	movs	r1, #1
 8005654:	438a      	bics	r2, r1
 8005656:	609a      	str	r2, [r3, #8]
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	f383 8810 	msr	PRIMASK, r3
}
 8005662:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005668:	2b01      	cmp	r3, #1
 800566a:	d118      	bne.n	800569e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8310 	mrs	r3, PRIMASK
 8005670:	60bb      	str	r3, [r7, #8]
  return(result);
 8005672:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005676:	2301      	movs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2110      	movs	r1, #16
 800568e:	438a      	bics	r2, r1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2280      	movs	r2, #128	@ 0x80
 80056a2:	2120      	movs	r1, #32
 80056a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b00e      	add	sp, #56	@ 0x38
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	fffffedf 	.word	0xfffffedf

080056c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	@ 0x30
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d035      	beq.n	8005742 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80056d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d8:	2252      	movs	r2, #82	@ 0x52
 80056da:	2100      	movs	r1, #0
 80056dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e8:	2301      	movs	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2180      	movs	r1, #128	@ 0x80
 8005700:	438a      	bics	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005710:	f3ef 8310 	mrs	r3, PRIMASK
 8005714:	61bb      	str	r3, [r7, #24]
  return(result);
 8005716:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
 800571a:	2301      	movs	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	f383 8810 	msr	PRIMASK, r3
}
 8005724:	46c0      	nop			@ (mov r8, r8)
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2140      	movs	r1, #64	@ 0x40
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	f383 8810 	msr	PRIMASK, r3
}
 8005740:	e004      	b.n	800574c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005744:	0018      	movs	r0, r3
 8005746:	f7ff fb53 	bl	8004df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b00c      	add	sp, #48	@ 0x30
 8005752:	bd80      	pop	{r7, pc}

08005754 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	0018      	movs	r0, r3
 8005766:	f7ff fb4b 	bl	8004e00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	46bd      	mov	sp, r7
 800576e:	b004      	add	sp, #16
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b094      	sub	sp, #80	@ 0x50
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	2b20      	cmp	r3, #32
 8005788:	d06f      	beq.n	800586a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800578a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578c:	225a      	movs	r2, #90	@ 0x5a
 800578e:	2100      	movs	r1, #0
 8005790:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005792:	f3ef 8310 	mrs	r3, PRIMASK
 8005796:	61bb      	str	r3, [r7, #24]
  return(result);
 8005798:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	493a      	ldr	r1, [pc, #232]	@ (800589c <UART_DMAReceiveCplt+0x128>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f383 8810 	msr	PRIMASK, r3
}
 80057c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c4:	f3ef 8310 	mrs	r3, PRIMASK
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ce:	2301      	movs	r3, #1
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			@ (mov r8, r8)
 80057da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2101      	movs	r1, #1
 80057e6:	438a      	bics	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]
 80057ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	f383 8810 	msr	PRIMASK, r3
}
 80057f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f6:	f3ef 8310 	mrs	r3, PRIMASK
 80057fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005800:	2301      	movs	r3, #1
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2140      	movs	r1, #64	@ 0x40
 8005818:	438a      	bics	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800581e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	2120      	movs	r1, #32
 800582e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005834:	2b01      	cmp	r3, #1
 8005836:	d118      	bne.n	800586a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005838:	f3ef 8310 	mrs	r3, PRIMASK
 800583c:	60fb      	str	r3, [r7, #12]
  return(result);
 800583e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005842:	2301      	movs	r3, #1
 8005844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2110      	movs	r1, #16
 800585a:	438a      	bics	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586c:	2200      	movs	r2, #0
 800586e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005874:	2b01      	cmp	r3, #1
 8005876:	d108      	bne.n	800588a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587a:	2258      	movs	r2, #88	@ 0x58
 800587c:	5a9a      	ldrh	r2, [r3, r2]
 800587e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005880:	0011      	movs	r1, r2
 8005882:	0018      	movs	r0, r3
 8005884:	f7ff fadc 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005888:	e003      	b.n	8005892 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800588a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588c:	0018      	movs	r0, r3
 800588e:	f7ff fabf 	bl	8004e10 <HAL_UART_RxCpltCallback>
}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b014      	add	sp, #80	@ 0x50
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	fffffeff 	.word	0xfffffeff

080058a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10a      	bne.n	80058d2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2258      	movs	r2, #88	@ 0x58
 80058c0:	5a9b      	ldrh	r3, [r3, r2]
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fab8 	bl	8004e40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058d0:	e003      	b.n	80058da <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7ff faa3 	bl	8004e20 <HAL_UART_RxHalfCpltCallback>
}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b004      	add	sp, #16
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b086      	sub	sp, #24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2280      	movs	r2, #128	@ 0x80
 80058fa:	589b      	ldr	r3, [r3, r2]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2280      	movs	r2, #128	@ 0x80
 8005906:	4013      	ands	r3, r2
 8005908:	2b80      	cmp	r3, #128	@ 0x80
 800590a:	d10a      	bne.n	8005922 <UART_DMAError+0x40>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b21      	cmp	r3, #33	@ 0x21
 8005910:	d107      	bne.n	8005922 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2252      	movs	r2, #82	@ 0x52
 8005916:	2100      	movs	r1, #0
 8005918:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	0018      	movs	r0, r3
 800591e:	f7ff fe47 	bl	80055b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2240      	movs	r2, #64	@ 0x40
 800592a:	4013      	ands	r3, r2
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d10a      	bne.n	8005946 <UART_DMAError+0x64>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b22      	cmp	r3, #34	@ 0x22
 8005934:	d107      	bne.n	8005946 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	225a      	movs	r2, #90	@ 0x5a
 800593a:	2100      	movs	r1, #0
 800593c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff fe59 	bl	80055f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2284      	movs	r2, #132	@ 0x84
 800594a:	589b      	ldr	r3, [r3, r2]
 800594c:	2210      	movs	r2, #16
 800594e:	431a      	orrs	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2184      	movs	r1, #132	@ 0x84
 8005954:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff fa69 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	b006      	add	sp, #24
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	225a      	movs	r2, #90	@ 0x5a
 8005978:	2100      	movs	r1, #0
 800597a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2252      	movs	r2, #82	@ 0x52
 8005980:	2100      	movs	r1, #0
 8005982:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	0018      	movs	r0, r3
 8005988:	f7ff fa52 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598c:	46c0      	nop			@ (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599c:	f3ef 8310 	mrs	r3, PRIMASK
 80059a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	2301      	movs	r3, #1
 80059a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f383 8810 	msr	PRIMASK, r3
}
 80059b0:	46c0      	nop			@ (mov r8, r8)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2140      	movs	r1, #64	@ 0x40
 80059be:	438a      	bics	r2, r1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f383 8810 	msr	PRIMASK, r3
}
 80059cc:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff fa07 	bl	8004df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b006      	add	sp, #24
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e05b      	b.n	8005abc <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d107      	bne.n	8005a1c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2278      	movs	r2, #120	@ 0x78
 8005a10:	2100      	movs	r1, #0
 8005a12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fb fee4 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2224      	movs	r2, #36	@ 0x24
 8005a20:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	438a      	bics	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7ff fb4b 	bl	80050d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fa07 	bl	8004e58 <UART_SetConfig>
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_RS485Ex_Init+0x68>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e033      	b.n	8005abc <HAL_RS485Ex_Init+0xd0>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2180      	movs	r1, #128	@ 0x80
 8005a60:	01c9      	lsls	r1, r1, #7
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <HAL_RS485Ex_Init+0xd8>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	055b      	lsls	r3, r3, #21
 8005a80:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac8 <HAL_RS485Ex_Init+0xdc>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	0019      	movs	r1, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2101      	movs	r1, #1
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7ff fbc3 	bl	8005240 <UART_CheckIdleState>
 8005aba:	0003      	movs	r3, r0
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b006      	add	sp, #24
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	ffff7fff 	.word	0xffff7fff
 8005ac8:	fc00ffff 	.word	0xfc00ffff

08005acc <memset>:
 8005acc:	0003      	movs	r3, r0
 8005ace:	1882      	adds	r2, r0, r2
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d100      	bne.n	8005ad6 <memset+0xa>
 8005ad4:	4770      	bx	lr
 8005ad6:	7019      	strb	r1, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	e7f9      	b.n	8005ad0 <memset+0x4>

08005adc <__libc_init_array>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	2600      	movs	r6, #0
 8005ae0:	4c0c      	ldr	r4, [pc, #48]	@ (8005b14 <__libc_init_array+0x38>)
 8005ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b18 <__libc_init_array+0x3c>)
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	42a6      	cmp	r6, r4
 8005aea:	d109      	bne.n	8005b00 <__libc_init_array+0x24>
 8005aec:	2600      	movs	r6, #0
 8005aee:	f000 f819 	bl	8005b24 <_init>
 8005af2:	4c0a      	ldr	r4, [pc, #40]	@ (8005b1c <__libc_init_array+0x40>)
 8005af4:	4d0a      	ldr	r5, [pc, #40]	@ (8005b20 <__libc_init_array+0x44>)
 8005af6:	1b64      	subs	r4, r4, r5
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	42a6      	cmp	r6, r4
 8005afc:	d105      	bne.n	8005b0a <__libc_init_array+0x2e>
 8005afe:	bd70      	pop	{r4, r5, r6, pc}
 8005b00:	00b3      	lsls	r3, r6, #2
 8005b02:	58eb      	ldr	r3, [r5, r3]
 8005b04:	4798      	blx	r3
 8005b06:	3601      	adds	r6, #1
 8005b08:	e7ee      	b.n	8005ae8 <__libc_init_array+0xc>
 8005b0a:	00b3      	lsls	r3, r6, #2
 8005b0c:	58eb      	ldr	r3, [r5, r3]
 8005b0e:	4798      	blx	r3
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7f2      	b.n	8005afa <__libc_init_array+0x1e>
 8005b14:	08005b74 	.word	0x08005b74
 8005b18:	08005b74 	.word	0x08005b74
 8005b1c:	08005b78 	.word	0x08005b78
 8005b20:	08005b74 	.word	0x08005b74

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
