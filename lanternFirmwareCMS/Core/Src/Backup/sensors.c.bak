#include "sensors.h"
#include "stm32f0xx_hal.h"
#include "modbus.h"

extern ADC_HandleTypeDef hadc; // DMA, sequence: IN8(PB0), IN9(PB1)

static uint16_t adc_raw[2];
static const float VREF    = 3.3f;   // ADC reference
static const float ADC_FS  = 4095.0f;
static const float TSC_GAIN = 20.0f; // tune if your current-sense amp differs
static const float RSENSE   = 0.01f; // tune if BOM differs

static uint16_t adc_to_mA(uint16_t raw)
{
    float v = (raw * VREF) / ADC_FS;       // amplifier output voltage
    float i = (v / TSC_GAIN) / RSENSE;     // amps
    if (i < 0)  i = 0;
    if (i > 65) i = 65;                    // clamp ~65 A (safety)
    return (uint16_t)(i * 1000.0f + 0.5f); // mA
}

void Sensors_Init(void)
{
    HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_raw, 2);
}

void Sensors_Task(void)
{
    // push to Modbus input registers; host can poll at ~1 Hz
    Modbus_SetCurrentRegs(adc_to_mA(adc_raw[0]), adc_to_mA(adc_raw[1]));
}

uint16_t Sensors_mA_0(void) { return adc_to_mA(adc_raw[0]); }
uint16_t Sensors_mA_1(void) { return adc_to_mA(adc_raw[1]); }
